
VCP-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c50  08008c50  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008c50  08008c50  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c50  08008c50  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001288  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001404  20001404  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001364b  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000330f  00000000  00000000  000337f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00036b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00037ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000563d  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ccd  00000000  00000000  0003df2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0cba  00000000  00000000  00053bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001048b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f88  00000000  00000000  00104904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bc0 	.word	0x08008bc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	08008bc0 	.word	0x08008bc0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <flashUnlock>:

/*********************************************************************
 * Разблокировать флеш для записи                                    *
 *********************************************************************/
void flashUnlock(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	FLASH->KEYR = FLASH_KEY1;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <flashUnlock+0x1c>)
 80001de:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <flashUnlock+0x20>)
 80001e0:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = FLASH_KEY2;
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <flashUnlock+0x1c>)
 80001e4:	4a05      	ldr	r2, [pc, #20]	; (80001fc <flashUnlock+0x24>)
 80001e6:	605a      	str	r2, [r3, #4]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	40022000 	.word	0x40022000
 80001f8:	45670123 	.word	0x45670123
 80001fc:	cdef89ab 	.word	0xcdef89ab

08000200 <flashLock>:

/*********************************************************************
 * Заблокировать флеш для записи                                     *
 *********************************************************************/
void flashLock(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <flashLock+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <flashLock+0x1c>)
 800020a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800020e:	6113      	str	r3, [r2, #16]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40022000 	.word	0x40022000

08000220 <flasReady>:

/*********************************************************************
 * Получить состояние флеш FALSE - занята                            *
 *********************************************************************/
uint8_t flasReady(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	return !(FLASH->SR & FLASH_SR_BSY);
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <flasReady+0x20>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	2b00      	cmp	r3, #0
 800022e:	bf0c      	ite	eq
 8000230:	2301      	moveq	r3, #1
 8000232:	2300      	movne	r3, #0
 8000234:	b2db      	uxtb	r3, r3
}
 8000236:	4618      	mov	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	40022000 	.word	0x40022000

08000244 <flasCheckEOP>:

/*********************************************************************
 * Проверка окончания операции                                       *
 *********************************************************************/
uint8_t flasCheckEOP(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	if(FLASH->SR & FLASH_SR_EOP)
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <flasCheckEOP+0x2c>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	f003 0320 	and.w	r3, r3, #32
 8000250:	2b00      	cmp	r3, #0
 8000252:	d007      	beq.n	8000264 <flasCheckEOP+0x20>
	{
		FLASH->SR |= FLASH_SR_EOP;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <flasCheckEOP+0x2c>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <flasCheckEOP+0x2c>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	60d3      	str	r3, [r2, #12]
		return TRUE;
 8000260:	2301      	movs	r3, #1
 8000262:	e000      	b.n	8000266 <flasCheckEOP+0x22>
	}
	return FALSE;
 8000264:	2300      	movs	r3, #0
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	40022000 	.word	0x40022000

08000274 <flashWriteWord>:

/*********************************************************************
 * Запись одного слова в флеш. Данные пишутся по 16 бит              *
 *********************************************************************/
uint8_t flashWriteWord(uint32_t address, uint32_t data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	while(!flasReady());
 800027e:	bf00      	nop
 8000280:	f7ff ffce 	bl	8000220 <flasReady>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0fa      	beq.n	8000280 <flashWriteWord+0xc>
	flashUnlock();
 800028a:	f7ff ffa5 	bl	80001d8 <flashUnlock>
	FLASH->CR |= FLASH_CR_PG;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <flashWriteWord+0x84>)
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <flashWriteWord+0x84>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6113      	str	r3, [r2, #16]
	*(__IO uint16_t*)address = (uint16_t)data;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	b292      	uxth	r2, r2
 80002a0:	801a      	strh	r2, [r3, #0]
	while(!flasReady());
 80002a2:	bf00      	nop
 80002a4:	f7ff ffbc 	bl	8000220 <flasReady>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0fa      	beq.n	80002a4 <flashWriteWord+0x30>
	if(!flasCheckEOP()) return FALSE;
 80002ae:	f7ff ffc9 	bl	8000244 <flasCheckEOP>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <flashWriteWord+0x48>
 80002b8:	2300      	movs	r3, #0
 80002ba:	e018      	b.n	80002ee <flashWriteWord+0x7a>
	address += 2;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3302      	adds	r3, #2
 80002c0:	607b      	str	r3, [r7, #4]
	*(__IO uint16_t*)address = (uint16_t)(data >> 16);
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	0c1a      	lsrs	r2, r3, #16
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	b292      	uxth	r2, r2
 80002ca:	801a      	strh	r2, [r3, #0]
	while(!flasReady());
 80002cc:	bf00      	nop
 80002ce:	f7ff ffa7 	bl	8000220 <flasReady>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0fa      	beq.n	80002ce <flashWriteWord+0x5a>
	FLASH->CR &= ~(FLASH_CR_PG);
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <flashWriteWord+0x84>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <flashWriteWord+0x84>)
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6113      	str	r3, [r2, #16]
	flashLock();
 80002e4:	f7ff ff8c 	bl	8000200 <flashLock>
	return flasCheckEOP();
 80002e8:	f7ff ffac 	bl	8000244 <flasCheckEOP>
 80002ec:	4603      	mov	r3, r0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40022000 	.word	0x40022000

080002fc <flashWriteDataWord>:

/*********************************************************************
 * Запись данных длинною lenght в флеш. Данные пишутся по 16 бит     *
 *********************************************************************/
uint8_t flashWriteDataWord(uint32_t address, uint32_t *data, uint16_t lenght)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	4613      	mov	r3, r2
 8000308:	80fb      	strh	r3, [r7, #6]
	while(lenght)
 800030a:	e013      	b.n	8000334 <flashWriteDataWord+0x38>
	{
		if(!flashWriteWord(address, *data)) return FALSE;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	68f8      	ldr	r0, [r7, #12]
 8000314:	f7ff ffae 	bl	8000274 <flashWriteWord>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <flashWriteDataWord+0x26>
 800031e:	2300      	movs	r3, #0
 8000320:	e00c      	b.n	800033c <flashWriteDataWord+0x40>
		data++;
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	3304      	adds	r3, #4
 8000326:	60bb      	str	r3, [r7, #8]
		address += 4;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3304      	adds	r3, #4
 800032c:	60fb      	str	r3, [r7, #12]
		lenght--;
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	3b01      	subs	r3, #1
 8000332:	80fb      	strh	r3, [r7, #6]
	while(lenght)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1e8      	bne.n	800030c <flashWriteDataWord+0x10>
	}
	return TRUE;
 800033a:	2301      	movs	r3, #1
}
 800033c:	4618      	mov	r0, r3
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 fac1 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f82f 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f000 f90d 	bl	8000570 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000356:	f000 f88d 	bl	8000474 <MX_I2C1_Init>
  MX_SPI1_Init();
 800035a:	f000 f8cb 	bl	80004f4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800035e:	f007 ff33 	bl	80081c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  for (uint8_t i = 0; i < 10; i++)
 8000362:	2300      	movs	r3, #0
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	e01b      	b.n	80003a0 <main+0x5c>
  {
	  log.timestamp = 1 + 1 * i;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	3301      	adds	r3, #1
 800036c:	461a      	mov	r2, r3
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <main+0x64>)
 8000370:	601a      	str	r2, [r3, #0]
	  log.cardid = 0x33 + i;
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	3333      	adds	r3, #51	; 0x33
 8000376:	461a      	mov	r2, r3
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <main+0x64>)
 800037a:	605a      	str	r2, [r3, #4]
	  log.action = 0x01 + i;
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	b29b      	uxth	r3, r3
 8000380:	3301      	adds	r3, #1
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <main+0x64>)
 8000386:	811a      	strh	r2, [r3, #8]
//	  flashErasePage(0x0803FFFF - i * 4);
	  flashWriteDataWord(0x0803FFFF - i * 4, (uint32_t *)&log, sizeof(log) / sizeof(uint32_t));
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	009a      	lsls	r2, r3, #2
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x68>)
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	2203      	movs	r2, #3
 8000392:	4905      	ldr	r1, [pc, #20]	; (80003a8 <main+0x64>)
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ffb1 	bl	80002fc <flashWriteDataWord>
  for (uint8_t i = 0; i < 10; i++)
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	3301      	adds	r3, #1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b09      	cmp	r3, #9
 80003a4:	d9e0      	bls.n	8000368 <main+0x24>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <main+0x62>
 80003a8:	20000250 	.word	0x20000250
 80003ac:	0803ffff 	.word	0x0803ffff

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b09e      	sub	sp, #120	; 0x78
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003ba:	2228      	movs	r2, #40	; 0x28
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f008 fbf6 	bl	8008bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	223c      	movs	r2, #60	; 0x3c
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f008 fbe8 	bl	8008bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003e0:	2303      	movs	r3, #3
 80003e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ee:	2301      	movs	r3, #1
 80003f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f2:	2310      	movs	r3, #16
 80003f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000400:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000404:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fb6a 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000416:	f000 f93b 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041a:	230f      	movs	r3, #15
 800041c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041e:	2302      	movs	r3, #2
 8000420:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000430:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000434:	2101      	movs	r1, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f003 fb92 	bl	8003b60 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000442:	f000 f925 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <SystemClock_Config+0xc0>)
 8000448:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800044e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000452:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000454:	463b      	mov	r3, r7
 8000456:	4618      	mov	r0, r3
 8000458:	f003 fd68 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000462:	f000 f915 	bl	8000690 <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3778      	adds	r7, #120	; 0x78
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	00020020 	.word	0x00020020

08000474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_I2C1_Init+0x74>)
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <MX_I2C1_Init+0x78>)
 800047c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <MX_I2C1_Init+0x7c>)
 8000482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_I2C1_Init+0x74>)
 800048c:	2201      	movs	r2, #1
 800048e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ae:	480e      	ldr	r0, [pc, #56]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004b0:	f000 fd18 	bl	8000ee4 <HAL_I2C_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ba:	f000 f8e9 	bl	8000690 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004be:	2100      	movs	r1, #0
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004c2:	f000 fd9e 	bl	8001002 <HAL_I2CEx_ConfigAnalogFilter>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004cc:	f000 f8e0 	bl	8000690 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d0:	2100      	movs	r1, #0
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_I2C1_Init+0x74>)
 80004d4:	f000 fde0 	bl	8001098 <HAL_I2CEx_ConfigDigitalFilter>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004de:	f000 f8d7 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000198 	.word	0x20000198
 80004ec:	40005400 	.word	0x40005400
 80004f0:	2000090e 	.word	0x2000090e

080004f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_SPI1_Init+0x74>)
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <MX_SPI1_Init+0x78>)
 80004fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_SPI1_Init+0x74>)
 8000500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_SPI1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_SPI1_Init+0x74>)
 800050e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000512:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_SPI1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_SPI1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_SPI1_Init+0x74>)
 8000522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000526:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_SPI1_Init+0x74>)
 800052a:	2208      	movs	r2, #8
 800052c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_SPI1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_SPI1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_SPI1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_SPI1_Init+0x74>)
 8000542:	2207      	movs	r2, #7
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_SPI1_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_SPI1_Init+0x74>)
 800054e:	2208      	movs	r2, #8
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_SPI1_Init+0x74>)
 8000554:	f003 fe9a 	bl	800428c <HAL_SPI_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800055e:	f000 f897 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200001ec 	.word	0x200001ec
 800056c:	40013000 	.word	0x40013000

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000586:	4b37      	ldr	r3, [pc, #220]	; (8000664 <MX_GPIO_Init+0xf4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a36      	ldr	r2, [pc, #216]	; (8000664 <MX_GPIO_Init+0xf4>)
 800058c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b34      	ldr	r3, [pc, #208]	; (8000664 <MX_GPIO_Init+0xf4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b31      	ldr	r3, [pc, #196]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a30      	ldr	r2, [pc, #192]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a24      	ldr	r2, [pc, #144]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_GPIO_Init+0xf4>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005fe:	2200      	movs	r2, #0
 8000600:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000604:	4818      	ldr	r0, [pc, #96]	; (8000668 <MX_GPIO_Init+0xf8>)
 8000606:	f000 fc55 	bl	8000eb4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800060a:	2337      	movs	r3, #55	; 0x37
 800060c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <MX_GPIO_Init+0xf8>)
 8000620:	f000 face 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000624:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000628:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <MX_GPIO_Init+0xf8>)
 800063e:	f000 fabf 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fab2 	bl	8000bc0 <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	48001000 	.word	0x48001000

0800066c <CDC_ReceiveCallBack>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((char *)buf, strlen((char *)buf));
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fda6 	bl	80001c8 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29b      	uxth	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f007 fe64 	bl	8008350 <CDC_Transmit_FS>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <HAL_MspInit+0x44>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <HAL_MspInit+0x44>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x44>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x44>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006d2:	2007      	movs	r0, #7
 80006d4:	f000 fa32 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <HAL_I2C_MspInit+0x7c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d127      	bne.n	8000756 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_I2C_MspInit+0x80>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <HAL_I2C_MspInit+0x80>)
 800070c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_I2C_MspInit+0x80>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800071e:	23c0      	movs	r3, #192	; 0xc0
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000722:	2312      	movs	r3, #18
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072e:	2304      	movs	r3, #4
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <HAL_I2C_MspInit+0x84>)
 800073a:	f000 fa41 	bl	8000bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_I2C_MspInit+0x80>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_I2C_MspInit+0x80>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_I2C_MspInit+0x80>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40005400 	.word	0x40005400
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400

0800076c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_SPI_MspInit+0x7c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d128      	bne.n	80007e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_SPI_MspInit+0x80>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <HAL_SPI_MspInit+0x80>)
 8000794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_SPI_MspInit+0x80>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_SPI_MspInit+0x80>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_SPI_MspInit+0x80>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_SPI_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007be:	23e0      	movs	r3, #224	; 0xe0
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ce:	2305      	movs	r3, #5
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 f9f0 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40013000 	.word	0x40013000
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f88e 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800084a:	f000 fd69 	bl	8001320 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000ef8 	.word	0x20000ef8

08000858 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000880:	f7ff ffea 	bl	8000858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f008 f95d 	bl	8008b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ae:	f7ff fd49 	bl	8000344 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80008c0:	08008c58 	.word	0x08008c58
  ldr r2, =_sbss
 80008c4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80008c8:	20001404 	.word	0x20001404

080008cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_2_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x28>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x28>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f92b 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fed6 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40022000 	.word	0x40022000

080008fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f943 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f000 f90b 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	2000025c 	.word	0x2000025c

08000984 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;  
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000025c 	.word	0x2000025c

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4907      	ldr	r1, [pc, #28]	; (8000a38 <__NVIC_EnableIRQ+0x38>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff29 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff3e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff8e 	bl	8000a90 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff31 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa2 	bl	8000af8 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e154      	b.n	8000e7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8146 	beq.w	8000e74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d005      	beq.n	8000c00 <HAL_GPIO_Init+0x40>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d130      	bne.n	8000c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	f003 0201 	and.w	r2, r3, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d017      	beq.n	8000c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d123      	bne.n	8000cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	08da      	lsrs	r2, r3, #3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3208      	adds	r2, #8
 8000cec:	6939      	ldr	r1, [r7, #16]
 8000cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0203 	and.w	r2, r3, #3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80a0 	beq.w	8000e74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d34:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a57      	ldr	r2, [pc, #348]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <HAL_GPIO_Init+0x2d8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d4c:	4a53      	ldr	r2, [pc, #332]	; (8000e9c <HAL_GPIO_Init+0x2dc>)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d76:	d019      	beq.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <HAL_GPIO_Init+0x2e0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d013      	beq.n	8000da8 <HAL_GPIO_Init+0x1e8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <HAL_GPIO_Init+0x2e4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00d      	beq.n	8000da4 <HAL_GPIO_Init+0x1e4>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a47      	ldr	r2, [pc, #284]	; (8000ea8 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d007      	beq.n	8000da0 <HAL_GPIO_Init+0x1e0>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a46      	ldr	r2, [pc, #280]	; (8000eac <HAL_GPIO_Init+0x2ec>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d101      	bne.n	8000d9c <HAL_GPIO_Init+0x1dc>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e008      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da0:	2303      	movs	r3, #3
 8000da2:	e004      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000dac:	2300      	movs	r3, #0
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dbe:	4937      	ldr	r1, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x2dc>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df0:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1a:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e44:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_GPIO_Init+0x2f0>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f47f aea3 	bne.w	8000bd0 <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	787b      	ldrb	r3, [r7, #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eca:	887a      	ldrh	r2, [r7, #2]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e081      	b.n	8000ffa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fbea 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2224      	movs	r2, #36	; 0x24
 8000f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e006      	b.n	8000f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d104      	bne.n	8000f7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69d9      	ldr	r1, [r3, #28]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b20      	cmp	r3, #32
 8001016:	d138      	bne.n	800108a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001022:	2302      	movs	r3, #2
 8001024:	e032      	b.n	800108c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2224      	movs	r2, #36	; 0x24
 8001032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001054:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b20      	cmp	r3, #32
 80010ac:	d139      	bne.n	8001122 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e033      	b.n	8001124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2220      	movs	r2, #32
 8001112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001122:	2302      	movs	r3, #2
  }
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b08b      	sub	sp, #44	; 0x2c
 8001134:	af06      	add	r7, sp, #24
 8001136:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0c4      	b.n	80012cc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f007 fa30 	bl	80085bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2203      	movs	r2, #3
 8001160:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f951 	bl	8004410 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e040      	b.n	80011f6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	3301      	adds	r3, #1
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	3303      	adds	r3, #3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	440b      	add	r3, r1
 80011c2:	3338      	adds	r3, #56	; 0x38
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	333c      	adds	r3, #60	; 0x3c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3340      	adds	r3, #64	; 0x40
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	3301      	adds	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3b9      	bcc.n	8001174 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e044      	b.n	8001290 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	440b      	add	r3, r1
 8001240:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3b5      	bcc.n	8001206 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	687e      	ldr	r6, [r7, #4]
 80012a2:	466d      	mov	r5, sp
 80012a4:	f106 0410 	add.w	r4, r6, #16
 80012a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	1d33      	adds	r3, r6, #4
 80012b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f003 f8c6 	bl	8004446 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_PCD_Start+0x16>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e016      	b.n	8001318 <HAL_PCD_Start+0x44>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 f873 	bl	80043e2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80012fc:	2101      	movs	r1, #1
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f007 fbfa 	bl	8008af8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f005 fb32 	bl	8006972 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f005 fb2b 	bl	8006988 <USB_ReadInterrupts>
 8001332:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fab2 	bl	80018a8 <PCD_EP_ISR_Handler>

    return;
 8001344:	e0bd      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001362:	b292      	uxth	r2, r2
 8001364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f007 f9c8 	bl	80086fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800136e:	2100      	movs	r1, #0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8a9 	bl	80014c8 <HAL_PCD_SetAddress>

    return;
 8001376:	e0a4      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00c      	beq.n	800139c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001394:	b292      	uxth	r2, r2
 8001396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800139a:	e092      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013b8:	b292      	uxth	r2, r2
 80013ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013be:	e080      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d027      	beq.n	800141a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0204 	bic.w	r2, r2, #4
 80013dc:	b292      	uxth	r2, r2
 80013de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0208 	bic.w	r2, r2, #8
 80013f4:	b292      	uxth	r2, r2
 80013f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f007 f9b8 	bl	8008770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001412:	b292      	uxth	r2, r2
 8001414:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001418:	e053      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001420:	2b00      	cmp	r3, #0
 8001422:	d027      	beq.n	8001474 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0208 	orr.w	r2, r2, #8
 8001436:	b292      	uxth	r2, r2
 8001438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800144e:	b292      	uxth	r2, r2
 8001450:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0204 	orr.w	r2, r2, #4
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f007 f965 	bl	800873c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001472:	e026      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00f      	beq.n	800149e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001490:	b292      	uxth	r2, r2
 8001492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f007 f923 	bl	80086e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800149c:	e011      	b.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014ba:	b292      	uxth	r2, r2
 80014bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014c0:	bf00      	nop
  }
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_PCD_SetAddress+0x1a>
 80014de:	2302      	movs	r3, #2
 80014e0:	e013      	b.n	800150a <HAL_PCD_SetAddress+0x42>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 fa25 	bl	800694a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	4608      	mov	r0, r1
 800151c:	4611      	mov	r1, r2
 800151e:	461a      	mov	r2, r3
 8001520:	4603      	mov	r3, r0
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	460b      	mov	r3, r1
 8001526:	803b      	strh	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001534:	2b00      	cmp	r3, #0
 8001536:	da0e      	bge.n	8001556 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	705a      	strb	r2, [r3, #1]
 8001554:	e00e      	b.n	8001574 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	f003 0207 	and.w	r2, r3, #7
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	b2da      	uxtb	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001580:	883a      	ldrh	r2, [r7, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	78ba      	ldrb	r2, [r7, #2]
 800158a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800158c:	78bb      	ldrb	r3, [r7, #2]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d102      	bne.n	8001598 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_PCD_EP_Open+0x94>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e00e      	b.n	80015c4 <HAL_PCD_EP_Open+0xb2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68f9      	ldr	r1, [r7, #12]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f002 ff67 	bl	8004488 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015c2:	7afb      	ldrb	r3, [r7, #11]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da0e      	bge.n	80015fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
 80015fc:	e00e      	b.n	800161c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f003 0207 	and.w	r2, r3, #7
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	b2da      	uxtb	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_PCD_EP_Close+0x6a>
 8001632:	2302      	movs	r3, #2
 8001634:	e00e      	b.n	8001654 <HAL_PCD_EP_Close+0x88>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68f9      	ldr	r1, [r7, #12]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fae3 	bl	8004c10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	460b      	mov	r3, r1
 800166a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	f003 0207 	and.w	r2, r3, #7
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800169c:	7afb      	ldrb	r3, [r7, #11]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6979      	ldr	r1, [r7, #20]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fc9b 	bl	8004fea <USB_EPStartXfer>

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	f003 0207 	and.w	r2, r3, #7
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016e0:	681b      	ldr	r3, [r3, #0]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	460b      	mov	r3, r1
 80016fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016fe:	7afb      	ldrb	r3, [r7, #11]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2201      	movs	r2, #1
 8001738:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	b2da      	uxtb	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6979      	ldr	r1, [r7, #20]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fc4c 	bl	8004fea <USB_EPStartXfer>

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 0207 	and.w	r2, r3, #7
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d901      	bls.n	800177a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e03e      	b.n	80017f8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800177a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800177e:	2b00      	cmp	r3, #0
 8001780:	da0e      	bge.n	80017a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	705a      	strb	r2, [r3, #1]
 800179e:	e00c      	b.n	80017ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_PCD_EP_SetStall+0x7e>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e00e      	b.n	80017f8 <HAL_PCD_EP_SetStall+0x9c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68f9      	ldr	r1, [r7, #12]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 ffaf 	bl	800674c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	f003 020f 	and.w	r2, r3, #15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	d901      	bls.n	800181e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e040      	b.n	80018a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800181e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da0e      	bge.n	8001844 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	705a      	strb	r2, [r3, #1]
 8001842:	e00e      	b.n	8001862 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	f003 0207 	and.w	r2, r3, #7
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	b2da      	uxtb	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_PCD_EP_ClrStall+0x82>
 800187e:	2302      	movs	r3, #2
 8001880:	e00e      	b.n	80018a0 <HAL_PCD_EP_ClrStall+0xa0>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f004 ffac 	bl	80067ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b096      	sub	sp, #88	; 0x58
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018b0:	e3bf      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80018cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f040 8179 	bne.w	8001bc8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d152      	bne.n	8001988 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	81fb      	strh	r3, [r7, #14]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001902:	b29b      	uxth	r3, r3
 8001904:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3328      	adds	r3, #40	; 0x28
 800190a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001914:	b29b      	uxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	3302      	adds	r3, #2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001936:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	441a      	add	r2, r3
 8001942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001944:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f006 feb0 	bl	80086ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 836b 	beq.w	8002032 <PCD_EP_ISR_Handler+0x78a>
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 8366 	bne.w	8002032 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001972:	b2da      	uxtb	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b292      	uxth	r2, r2
 800197a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001986:	e354      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800199a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800199e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d034      	beq.n	8001a10 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	3306      	adds	r3, #6
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	f005 f825 	bl	8006a34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019f6:	4013      	ands	r3, r2
 80019f8:	823b      	strh	r3, [r7, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	8a3a      	ldrh	r2, [r7, #16]
 8001a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a04:	b292      	uxth	r2, r2
 8001a06:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f006 fe23 	bl	8008654 <HAL_PCD_SetupStageCallback>
 8001a0e:	e310      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a10:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f280 830c 	bge.w	8002032 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a26:	4013      	ands	r3, r2
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	8bfa      	ldrh	r2, [r7, #30]
 8001a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a34:	b292      	uxth	r2, r2
 8001a36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d019      	beq.n	8001aa0 <PCD_EP_ISR_Handler+0x1f8>
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7a:	6959      	ldr	r1, [r3, #20]
 8001a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f004 ffd5 	bl	8006a34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	441a      	add	r2, r3
 8001a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f006 fdec 	bl	8008678 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 82bd 	bne.w	8002032 <PCD_EP_ISR_Handler+0x78a>
 8001ab8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001abc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ac4:	f000 82b5 	beq.w	8002032 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4413      	add	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	801a      	strh	r2, [r3, #0]
 8001af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b3e      	cmp	r3, #62	; 0x3e
 8001afe:	d91d      	bls.n	8001b3c <PCD_EP_ISR_Handler+0x294>
 8001b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	095b      	lsrs	r3, r3, #5
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
 8001b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <PCD_EP_ISR_Handler+0x272>
 8001b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b16:	3b01      	subs	r3, #1
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	029b      	lsls	r3, r3, #10
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	e026      	b.n	8001b8a <PCD_EP_ISR_Handler+0x2e2>
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <PCD_EP_ISR_Handler+0x2b2>
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	801a      	strh	r2, [r3, #0]
 8001b58:	e017      	b.n	8001b8a <PCD_EP_ISR_Handler+0x2e2>
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
 8001b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <PCD_EP_ISR_Handler+0x2cc>
 8001b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b70:	3301      	adds	r3, #1
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9a:	827b      	strh	r3, [r7, #18]
 8001b9c:	8a7b      	ldrh	r3, [r7, #18]
 8001b9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ba2:	827b      	strh	r3, [r7, #18]
 8001ba4:	8a7b      	ldrh	r3, [r7, #18]
 8001ba6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001baa:	827b      	strh	r3, [r7, #18]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	8013      	strh	r3, [r2, #0]
 8001bc6:	e234      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bdc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f280 80fc 	bge.w	8001dde <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c1c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	7b1b      	ldrb	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d125      	bne.n	8001c86 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3306      	adds	r3, #6
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c62:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8092 	beq.w	8001d94 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c76:	6959      	ldr	r1, [r3, #20]
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	88da      	ldrh	r2, [r3, #6]
 8001c7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c80:	f004 fed8 	bl	8006a34 <USB_ReadPMA>
 8001c84:	e086      	b.n	8001d94 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d10a      	bne.n	8001ca4 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c92:	461a      	mov	r2, r3
 8001c94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f9d9 	bl	800204e <HAL_PCD_EP_DB_Receive>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001ca2:	e077      	b.n	8001d94 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cbe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	441a      	add	r2, r3
 8001cd0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	3302      	adds	r3, #2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d02e      	beq.n	8001d94 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	6959      	ldr	r1, [r3, #20]
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	891a      	ldrh	r2, [r3, #8]
 8001d42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d46:	f004 fe75 	bl	8006a34 <USB_ReadPMA>
 8001d4a:	e023      	b.n	8001d94 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3306      	adds	r3, #6
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d009      	beq.n	8001d94 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	6959      	ldr	r1, [r3, #20]
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	895a      	ldrh	r2, [r3, #10]
 8001d8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d90:	f004 fe50 	bl	8006a34 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d9c:	441a      	add	r2, r3
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001daa:	441a      	add	r2, r3
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <PCD_EP_ISR_Handler+0x51c>
 8001db8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d206      	bcs.n	8001dd2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f006 fc54 	bl	8008678 <HAL_PCD_DataOutStageCallback>
 8001dd0:	e005      	b.n	8001dde <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 f906 	bl	8004fea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8123 	beq.w	8002032 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	441a      	add	r2, r3
 8001e2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	78db      	ldrb	r3, [r3, #3]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 80a2 	bne.w	8001f8a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	7b1b      	ldrb	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8093 	beq.w	8001f7c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d046      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d126      	bne.n	8001eb8 <PCD_EP_ISR_Handler+0x610>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	4413      	add	r3, r2
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	011a      	lsls	r2, r3, #4
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	e061      	b.n	8001f7c <PCD_EP_ISR_Handler+0x6d4>
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d15d      	bne.n	8001f7c <PCD_EP_ISR_Handler+0x6d4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	4413      	add	r3, r2
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	011a      	lsls	r2, r3, #4
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
 8001eee:	e045      	b.n	8001f7c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d126      	bne.n	8001f4c <PCD_EP_ISR_Handler+0x6a4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	4413      	add	r3, r2
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	011a      	lsls	r2, r3, #4
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	4413      	add	r3, r2
 8001f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
 8001f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	e017      	b.n	8001f7c <PCD_EP_ISR_Handler+0x6d4>
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d113      	bne.n	8001f7c <PCD_EP_ISR_Handler+0x6d4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f62:	4413      	add	r3, r2
 8001f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	011a      	lsls	r2, r3, #4
 8001f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6e:	4413      	add	r3, r2
 8001f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f74:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	2200      	movs	r2, #0
 8001f7a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f006 fb93 	bl	80086ae <HAL_PCD_DataInStageCallback>
 8001f88:	e053      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d146      	bne.n	8002024 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3302      	adds	r3, #2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d907      	bls.n	8001fde <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	e002      	b.n	8001fe4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f006 fb5b 	bl	80086ae <HAL_PCD_DataInStageCallback>
 8001ff8:	e01b      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002002:	441a      	add	r2, r3
 8002004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002006:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002010:	441a      	add	r2, r3
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002014:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800201c:	4618      	mov	r0, r3
 800201e:	f002 ffe4 	bl	8004fea <USB_EPStartXfer>
 8002022:	e006      	b.n	8002032 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002024:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002028:	461a      	mov	r2, r3
 800202a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f91b 	bl	8002268 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800203a:	b29b      	uxth	r3, r3
 800203c:	b21b      	sxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	f6ff ac37 	blt.w	80018b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3758      	adds	r7, #88	; 0x58
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b088      	sub	sp, #32
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	4613      	mov	r3, r2
 800205a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d07e      	beq.n	8002164 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	3302      	adds	r3, #2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	8b7b      	ldrh	r3, [r7, #26]
 8002096:	429a      	cmp	r2, r3
 8002098:	d306      	bcc.n	80020a8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	8b7b      	ldrh	r3, [r7, #26]
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	e002      	b.n	80020ae <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d123      	bne.n	80020fe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d0:	833b      	strh	r3, [r7, #24]
 80020d2:	8b3b      	ldrh	r3, [r7, #24]
 80020d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020d8:	833b      	strh	r3, [r7, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	8b3b      	ldrh	r3, [r7, #24]
 80020ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01f      	beq.n	8002148 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	82fb      	strh	r3, [r7, #22]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002144:	b29b      	uxth	r3, r3
 8002146:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6959      	ldr	r1, [r3, #20]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	891a      	ldrh	r2, [r3, #8]
 800215c:	8b7b      	ldrh	r3, [r7, #26]
 800215e:	f004 fc69 	bl	8006a34 <USB_ReadPMA>
 8002162:	e07c      	b.n	800225e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	3306      	adds	r3, #6
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	8b7b      	ldrh	r3, [r7, #26]
 8002194:	429a      	cmp	r2, r3
 8002196:	d306      	bcc.n	80021a6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	8b7b      	ldrh	r3, [r7, #26]
 800219e:	1ad2      	subs	r2, r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	e002      	b.n	80021ac <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d123      	bne.n	80021fc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ce:	83fb      	strh	r3, [r7, #30]
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021d6:	83fb      	strh	r3, [r7, #30]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	8bfb      	ldrh	r3, [r7, #30]
 80021e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11f      	bne.n	8002246 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002220:	83bb      	strh	r3, [r7, #28]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	441a      	add	r2, r3
 8002230:	8bbb      	ldrh	r3, [r7, #28]
 8002232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002242:	b29b      	uxth	r3, r3
 8002244:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002246:	8b7b      	ldrh	r3, [r7, #26]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6959      	ldr	r1, [r3, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	895a      	ldrh	r2, [r3, #10]
 8002258:	8b7b      	ldrh	r3, [r7, #26]
 800225a:	f004 fbeb 	bl	8006a34 <USB_ReadPMA>
    }
  }

  return count;
 800225e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0a4      	sub	sp, #144	; 0x90
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 81dd 	beq.w	800263c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228a:	b29b      	uxth	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	3302      	adds	r3, #2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d907      	bls.n	80022ca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	619a      	str	r2, [r3, #24]
 80022c8:	e002      	b.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f040 80b9 	bne.w	800244c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d126      	bne.n	8002330 <HAL_PCD_EP_DB_Transmit+0xc8>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	4413      	add	r3, r2
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	011a      	lsls	r2, r3, #4
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	4413      	add	r3, r2
 8002304:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002314:	b29a      	uxth	r2, r3
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002328:	b29a      	uxth	r2, r3
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	801a      	strh	r2, [r3, #0]
 800232e:	e01a      	b.n	8002366 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	785b      	ldrb	r3, [r3, #1]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d116      	bne.n	8002366 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234c:	4413      	add	r3, r2
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	011a      	lsls	r2, r3, #4
 8002356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002358:	4413      	add	r3, r2
 800235a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	2200      	movs	r2, #0
 8002364:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d126      	bne.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	011a      	lsls	r2, r3, #4
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	801a      	strh	r2, [r3, #0]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	e017      	b.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d113      	bne.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	4413      	add	r3, r2
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	011a      	lsls	r2, r3, #4
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	4413      	add	r3, r2
 80023e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f006 f958 	bl	80086ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 82fc 	beq.w	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002424:	82fb      	strh	r3, [r7, #22]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	441a      	add	r2, r3
 8002434:	8afb      	ldrh	r3, [r7, #22]
 8002436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800243a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800243e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002446:	b29b      	uxth	r3, r3
 8002448:	8013      	strh	r3, [r2, #0]
 800244a:	e2da      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d021      	beq.n	800249a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002470:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800248a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	b29b      	uxth	r3, r3
 8002498:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 82ae 	bne.w	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ae:	441a      	add	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024bc:	441a      	add	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6a1a      	ldr	r2, [r3, #32]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d30b      	bcc.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	621a      	str	r2, [r3, #32]
 80024e4:	e017      	b.n	8002516 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80024ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024fe:	e00a      	b.n	8002516 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d165      	bne.n	80025ea <HAL_PCD_EP_DB_Transmit+0x382>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	4413      	add	r3, r2
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	011a      	lsls	r2, r3, #4
 800253c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253e:	4413      	add	r3, r2
 8002540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
 8002546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002550:	b29a      	uxth	r2, r3
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255a:	2b3e      	cmp	r3, #62	; 0x3e
 800255c:	d91d      	bls.n	800259a <HAL_PCD_EP_DB_Transmit+0x332>
 800255e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	64bb      	str	r3, [r7, #72]	; 0x48
 8002566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_PCD_EP_DB_Transmit+0x310>
 8002572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002574:	3b01      	subs	r3, #1
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29a      	uxth	r2, r3
 800257e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002580:	b29b      	uxth	r3, r3
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	b29b      	uxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002592:	b29a      	uxth	r2, r3
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	e044      	b.n	8002624 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800259a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_PCD_EP_DB_Transmit+0x350>
 80025a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	e035      	b.n	8002624 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80025cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ce:	3301      	adds	r3, #1
 80025d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025da:	b29b      	uxth	r3, r3
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	801a      	strh	r2, [r3, #0]
 80025e8:	e01c      	b.n	8002624 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d118      	bne.n	8002624 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	647b      	str	r3, [r7, #68]	; 0x44
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002606:	4413      	add	r3, r2
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	011a      	lsls	r2, r3, #4
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	4413      	add	r3, r2
 8002614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
 800261a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800261e:	b29a      	uxth	r2, r3
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6959      	ldr	r1, [r3, #20]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	891a      	ldrh	r2, [r3, #8]
 8002630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002634:	b29b      	uxth	r3, r3
 8002636:	f004 f9b7 	bl	80069a8 <USB_WritePMA>
 800263a:	e1e2      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3306      	adds	r3, #6
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002670:	429a      	cmp	r2, r3
 8002672:	d307      	bcc.n	8002684 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800267c:	1ad2      	subs	r2, r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	619a      	str	r2, [r3, #24]
 8002682:	e002      	b.n	800268a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80c0 	bne.w	8002814 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d126      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x482>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b0:	4413      	add	r3, r2
 80026b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	011a      	lsls	r2, r3, #4
 80026ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026bc:	4413      	add	r3, r2
 80026be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80026c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026d2:	801a      	strh	r2, [r3, #0]
 80026d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e01a      	b.n	8002720 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d116      	bne.n	8002720 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	667b      	str	r3, [r7, #100]	; 0x64
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002706:	4413      	add	r3, r2
 8002708:	667b      	str	r3, [r7, #100]	; 0x64
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	011a      	lsls	r2, r3, #4
 8002710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002712:	4413      	add	r3, r2
 8002714:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002718:	663b      	str	r3, [r7, #96]	; 0x60
 800271a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800271c:	2200      	movs	r2, #0
 800271e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	677b      	str	r3, [r7, #116]	; 0x74
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	785b      	ldrb	r3, [r3, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d12b      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x51e>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273c:	b29b      	uxth	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	4413      	add	r3, r2
 8002744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	011a      	lsls	r2, r3, #4
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	4413      	add	r3, r2
 8002750:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002764:	b29a      	uxth	r2, r3
 8002766:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277c:	b29a      	uxth	r2, r3
 800277e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	e017      	b.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d113      	bne.n	80027b6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800279c:	4413      	add	r3, r2
 800279e:	677b      	str	r3, [r7, #116]	; 0x74
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	011a      	lsls	r2, r3, #4
 80027a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a8:	4413      	add	r3, r2
 80027aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ae:	673b      	str	r3, [r7, #112]	; 0x70
 80027b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f005 ff76 	bl	80086ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f040 811a 	bne.w	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	441a      	add	r2, r3
 80027fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800280a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]
 8002812:	e0f6      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d121      	bne.n	8002862 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002838:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800284e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	b29b      	uxth	r3, r3
 8002860:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 80ca 	bne.w	8002a02 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002876:	441a      	add	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002884:	441a      	add	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d30b      	bcc.n	80028ae <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a6:	1ad2      	subs	r2, r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	621a      	str	r2, [r3, #32]
 80028ac:	e017      	b.n	80028de <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028c6:	e00a      	b.n	80028de <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	657b      	str	r3, [r7, #84]	; 0x54
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d165      	bne.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x750>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002900:	4413      	add	r3, r2
 8002902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	011a      	lsls	r2, r3, #4
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	4413      	add	r3, r2
 800290e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002912:	65bb      	str	r3, [r7, #88]	; 0x58
 8002914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291e:	b29a      	uxth	r2, r3
 8002920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002928:	2b3e      	cmp	r3, #62	; 0x3e
 800292a:	d91d      	bls.n	8002968 <HAL_PCD_EP_DB_Transmit+0x700>
 800292c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	66bb      	str	r3, [r7, #104]	; 0x68
 8002934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002942:	3b01      	subs	r3, #1
 8002944:	66bb      	str	r3, [r7, #104]	; 0x68
 8002946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29a      	uxth	r2, r3
 800294c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294e:	b29b      	uxth	r3, r3
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	b29b      	uxth	r3, r3
 8002954:	4313      	orrs	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002960:	b29a      	uxth	r2, r3
 8002962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	e041      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0x784>
 8002968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297e:	b29a      	uxth	r2, r3
 8002980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	e032      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0x784>
 8002986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	66bb      	str	r3, [r7, #104]	; 0x68
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x738>
 800299a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800299c:	3301      	adds	r3, #1
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b4:	801a      	strh	r2, [r3, #0]
 80029b6:	e019      	b.n	80029ec <HAL_PCD_EP_DB_Transmit+0x784>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d115      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0x784>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ce:	4413      	add	r3, r2
 80029d0:	657b      	str	r3, [r7, #84]	; 0x54
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	011a      	lsls	r2, r3, #4
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	4413      	add	r3, r2
 80029dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e0:	653b      	str	r3, [r7, #80]	; 0x50
 80029e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6959      	ldr	r1, [r3, #20]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	895a      	ldrh	r2, [r3, #10]
 80029f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f003 ffd3 	bl	80069a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a1c:	82bb      	strh	r3, [r7, #20]
 8002a1e:	8abb      	ldrh	r3, [r7, #20]
 8002a20:	f083 0310 	eor.w	r3, r3, #16
 8002a24:	82bb      	strh	r3, [r7, #20]
 8002a26:	8abb      	ldrh	r3, [r7, #20]
 8002a28:	f083 0320 	eor.w	r3, r3, #32
 8002a2c:	82bb      	strh	r3, [r7, #20]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	8abb      	ldrh	r3, [r7, #20]
 8002a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3790      	adds	r7, #144	; 0x90
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e009      	b.n	8002aa6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a92:	897a      	ldrh	r2, [r7, #10]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002aa6:	893b      	ldrh	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	80da      	strh	r2, [r3, #6]
 8002aba:	e00b      	b.n	8002ad4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f001 b823 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 817d 	beq.w	8002e1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b20:	4bbc      	ldr	r3, [pc, #752]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d00c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b2c:	4bb9      	ldr	r3, [pc, #740]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d15c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x10e>
 8002b38:	4bb6      	ldr	r3, [pc, #728]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d155      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x10e>
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_RCC_OscConfig+0x94>
 8002b72:	4ba8      	ldr	r3, [pc, #672]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_OscConfig+0xc0>
 8002b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ba0:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bb0:	fa92 f2a2 	rbit	r2, r2
 8002bb4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bbc:	fab2 f282 	clz	r2, r2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f042 0220 	orr.w	r2, r2, #32
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f002 021f 	and.w	r2, r2, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 811f 	beq.w	8002e18 <HAL_RCC_OscConfig+0x334>
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8116 	bne.w	8002e18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f000 bfaf 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12e>
 8002c04:	4b83      	ldr	r3, [pc, #524]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a82      	ldr	r2, [pc, #520]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e036      	b.n	8002c80 <HAL_RCC_OscConfig+0x19c>
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x158>
 8002c22:	4b7c      	ldr	r3, [pc, #496]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7b      	ldr	r2, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e021      	b.n	8002c80 <HAL_RCC_OscConfig+0x19c>
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x184>
 8002c4e:	4b71      	ldr	r3, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a70      	ldr	r2, [pc, #448]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6e      	ldr	r3, [pc, #440]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6d      	ldr	r2, [pc, #436]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x19c>
 8002c68:	4b6a      	ldr	r3, [pc, #424]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a69      	ldr	r2, [pc, #420]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a66      	ldr	r2, [pc, #408]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c80:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f023 020f 	bic.w	r2, r3, #15
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	495f      	ldr	r1, [pc, #380]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d059      	beq.n	8002d5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fd fe6b 	bl	8000984 <HAL_GetTick>
 8002cae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fd fe66 	bl	8000984 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d902      	bls.n	8002cca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	f000 bf43 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
 8002cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCC_OscConfig+0x218>
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	e015      	b.n	8002d28 <HAL_RCC_OscConfig+0x244>
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d2c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d34:	fa92 f2a2 	rbit	r2, r2
 8002d38:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ab      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x1d0>
 8002d5c:	e05d      	b.n	8002e1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fd fe11 	bl	8000984 <HAL_GetTick>
 8002d62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fd fe0c 	bl	8000984 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b64      	cmp	r3, #100	; 0x64
 8002d76:	d902      	bls.n	8002d7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f000 bee9 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
 8002d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2cc>
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e015      	b.n	8002ddc <HAL_RCC_OscConfig+0x2f8>
 8002db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002db4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002de0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002de4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002df0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002df4:	fab2 f282 	clz	r2, r2
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	f042 0220 	orr.w	r2, r2, #32
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f002 021f 	and.w	r2, r2, #31
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ab      	bne.n	8002d68 <HAL_RCC_OscConfig+0x284>
 8002e10:	e003      	b.n	8002e1a <HAL_RCC_OscConfig+0x336>
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 817d 	beq.w	800312a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e30:	4ba6      	ldr	r3, [pc, #664]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e3c:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d172      	bne.n	8002f2e <HAL_RCC_OscConfig+0x44a>
 8002e48:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d16c      	bne.n	8002f2e <HAL_RCC_OscConfig+0x44a>
 8002e54:	2302      	movs	r3, #2
 8002e56:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e66:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d102      	bne.n	8002e84 <HAL_RCC_OscConfig+0x3a0>
 8002e7e:	4b93      	ldr	r3, [pc, #588]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	e013      	b.n	8002eac <HAL_RCC_OscConfig+0x3c8>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ea8:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2202      	movs	r2, #2
 8002eae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002eb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002ebe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ec2:	fab2 f282 	clz	r2, r2
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	f042 0220 	orr.w	r2, r2, #32
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	f002 021f 	and.w	r2, r2, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x410>
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f000 be2e 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b75      	ldr	r3, [pc, #468]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	21f8      	movs	r1, #248	; 0xf8
 8002f0a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f12:	fa91 f1a1 	rbit	r1, r1
 8002f16:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f1a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f1e:	fab1 f181 	clz	r1, r1
 8002f22:	b2c9      	uxtb	r1, r1
 8002f24:	408b      	lsls	r3, r1
 8002f26:	4969      	ldr	r1, [pc, #420]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2c:	e0fd      	b.n	800312a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8088 	beq.w	8003050 <HAL_RCC_OscConfig+0x56c>
 8002f40:	2301      	movs	r3, #1
 8002f42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fd0a 	bl	8000984 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fd fd05 	bl	8000984 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	f000 bde2 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4d8>
 8002fb6:	4b45      	ldr	r3, [pc, #276]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	e013      	b.n	8002fe4 <HAL_RCC_OscConfig+0x500>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fce:	2302      	movs	r3, #2
 8002fd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002fea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fee:	fa92 f2a2 	rbit	r2, r2
 8002ff2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ff6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ffa:	fab2 f282 	clz	r2, r2
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f042 0220 	orr.w	r2, r2, #32
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	f002 021f 	and.w	r2, r2, #31
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f202 	lsl.w	r2, r1, r2
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0af      	beq.n	8002f76 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	21f8      	movs	r1, #248	; 0xf8
 800302c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003034:	fa91 f1a1 	rbit	r1, r1
 8003038:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800303c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003040:	fab1 f181 	clz	r1, r1
 8003044:	b2c9      	uxtb	r1, r1
 8003046:	408b      	lsls	r3, r1
 8003048:	4920      	ldr	r1, [pc, #128]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
 800304e:	e06c      	b.n	800312a <HAL_RCC_OscConfig+0x646>
 8003050:	2301      	movs	r3, #1
 8003052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003062:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	461a      	mov	r2, r3
 8003078:	2300      	movs	r3, #0
 800307a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fd fc82 	bl	8000984 <HAL_GetTick>
 8003080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003086:	f7fd fc7d 	bl	8000984 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d902      	bls.n	800309c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	f000 bd5a 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
 800309c:	2302      	movs	r3, #2
 800309e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d104      	bne.n	80030d0 <HAL_RCC_OscConfig+0x5ec>
 80030c6:	4b01      	ldr	r3, [pc, #4]	; (80030cc <HAL_RCC_OscConfig+0x5e8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	e015      	b.n	80030f8 <HAL_RCC_OscConfig+0x614>
 80030cc:	40021000 	.word	0x40021000
 80030d0:	2302      	movs	r3, #2
 80030d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030e2:	2302      	movs	r3, #2
 80030e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030f4:	4bc8      	ldr	r3, [pc, #800]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2202      	movs	r2, #2
 80030fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003102:	fa92 f2a2 	rbit	r2, r2
 8003106:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800310a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800310e:	fab2 f282 	clz	r2, r2
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	f042 0220 	orr.w	r2, r2, #32
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f002 021f 	and.w	r2, r2, #31
 800311e:	2101      	movs	r1, #1
 8003120:	fa01 f202 	lsl.w	r2, r1, r2
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ad      	bne.n	8003086 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 8110 	beq.w	8003360 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d079      	beq.n	8003244 <HAL_RCC_OscConfig+0x760>
 8003150:	2301      	movs	r3, #1
 8003152:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	4bab      	ldr	r3, [pc, #684]	; (800341c <HAL_RCC_OscConfig+0x938>)
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	461a      	mov	r2, r3
 8003176:	2301      	movs	r3, #1
 8003178:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7fd fc03 	bl	8000984 <HAL_GetTick>
 800317e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003184:	f7fd fbfe 	bl	8000984 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d902      	bls.n	800319a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	f000 bcdb 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
 800319a:	2302      	movs	r3, #2
 800319c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031b4:	2202      	movs	r2, #2
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031d8:	2202      	movs	r2, #2
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	fa93 f2a3 	rbit	r2, r3
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f4:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 80031f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003200:	2102      	movs	r1, #2
 8003202:	6019      	str	r1, [r3, #0]
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f1a3 	rbit	r1, r3
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800321a:	6019      	str	r1, [r3, #0]
  return result;
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0a0      	beq.n	8003184 <HAL_RCC_OscConfig+0x6a0>
 8003242:	e08d      	b.n	8003360 <HAL_RCC_OscConfig+0x87c>
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003266:	601a      	str	r2, [r3, #0]
  return result;
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003270:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	4b68      	ldr	r3, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x938>)
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	461a      	mov	r2, r3
 8003282:	2300      	movs	r3, #0
 8003284:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fd fb7d 	bl	8000984 <HAL_GetTick>
 800328a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7fd fb78 	bl	8000984 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d902      	bls.n	80032a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	f000 bc55 	b.w	8003b50 <HAL_RCC_OscConfig+0x106c>
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032ae:	2202      	movs	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032d2:	2202      	movs	r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	fa93 f2a3 	rbit	r2, r3
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 8003314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800331e:	2102      	movs	r1, #2
 8003320:	6019      	str	r1, [r3, #0]
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fa93 f1a3 	rbit	r1, r3
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003338:	6019      	str	r1, [r3, #0]
  return result;
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d197      	bne.n	8003290 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 81a1 	beq.w	80036b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337c:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	61d3      	str	r3, [r2, #28]
 8003394:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_RCC_OscConfig+0x93c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d11a      	bne.n	80033f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x93c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <HAL_RCC_OscConfig+0x93c>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fad9 	bl	8000984 <HAL_GetTick>
 80033d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	e009      	b.n	80033ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fd fad4 	bl	8000984 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	; 0x64
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e3b1      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_RCC_OscConfig+0x93c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10d      	bne.n	8003424 <HAL_RCC_OscConfig+0x940>
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a02      	ldr	r2, [pc, #8]	; (8003418 <HAL_RCC_OscConfig+0x934>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e03c      	b.n	8003490 <HAL_RCC_OscConfig+0x9ac>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	10908120 	.word	0x10908120
 8003420:	40007000 	.word	0x40007000
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10c      	bne.n	800344e <HAL_RCC_OscConfig+0x96a>
 8003434:	4bc1      	ldr	r3, [pc, #772]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4ac0      	ldr	r2, [pc, #768]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	4bbe      	ldr	r3, [pc, #760]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4abd      	ldr	r2, [pc, #756]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003446:	f023 0304 	bic.w	r3, r3, #4
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	e020      	b.n	8003490 <HAL_RCC_OscConfig+0x9ac>
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b05      	cmp	r3, #5
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x994>
 800345e:	4bb7      	ldr	r3, [pc, #732]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4ab6      	ldr	r2, [pc, #728]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4bb4      	ldr	r3, [pc, #720]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4ab3      	ldr	r2, [pc, #716]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0x9ac>
 8003478:	4bb0      	ldr	r3, [pc, #704]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4aaf      	ldr	r2, [pc, #700]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	4bad      	ldr	r3, [pc, #692]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4aac      	ldr	r2, [pc, #688]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 0304 	bic.w	r3, r3, #4
 800348e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8081 	beq.w	80035a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fd fa6f 	bl	8000984 <HAL_GetTick>
 80034a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fa6a 	bl	8000984 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034bc:	4293      	cmp	r3, r2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e345      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034cc:	2202      	movs	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034f0:	2202      	movs	r2, #2
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	fa93 f2a3 	rbit	r2, r3
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800350a:	601a      	str	r2, [r3, #0]
  return result;
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003514:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d102      	bne.n	8003530 <HAL_RCC_OscConfig+0xa4c>
 800352a:	4b84      	ldr	r3, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	e013      	b.n	8003558 <HAL_RCC_OscConfig+0xa74>
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f2a3 	rbit	r2, r3
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	4b79      	ldr	r3, [pc, #484]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003560:	2102      	movs	r1, #2
 8003562:	6011      	str	r1, [r2, #0]
 8003564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003568:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	fa92 f1a2 	rbit	r1, r2
 8003572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003576:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800357a:	6011      	str	r1, [r2, #0]
  return result;
 800357c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003580:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f002 021f 	and.w	r2, r2, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d084      	beq.n	80034ac <HAL_RCC_OscConfig+0x9c8>
 80035a2:	e07f      	b.n	80036a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fd f9ee 	bl	8000984 <HAL_GetTick>
 80035a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00b      	b.n	80035c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd f9e9 	bl	8000984 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e2c4      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035ce:	2202      	movs	r2, #2
 80035d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035f2:	2202      	movs	r2, #2
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800360c:	601a      	str	r2, [r3, #0]
  return result;
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003616:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d102      	bne.n	8003632 <HAL_RCC_OscConfig+0xb4e>
 800362c:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	e013      	b.n	800365a <HAL_RCC_OscConfig+0xb76>
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800363a:	2202      	movs	r2, #2
 800363c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800365e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003662:	2102      	movs	r1, #2
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	fa92 f1a2 	rbit	r1, r2
 8003674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003678:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800367c:	6011      	str	r1, [r2, #0]
  return result;
 800367e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003682:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f002 021f 	and.w	r2, r2, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d184      	bne.n	80035ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4a22      	ldr	r2, [pc, #136]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 80036b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8242 	beq.w	8003b4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <HAL_RCC_OscConfig+0xc58>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	f000 8213 	beq.w	8003afe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f040 8162 	bne.w	80039ae <HAL_RCC_OscConfig+0xeca>
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800370e:	601a      	str	r2, [r3, #0]
  return result;
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003718:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003724:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd f928 	bl	8000984 <HAL_GetTick>
 8003734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e00c      	b.n	8003754 <HAL_RCC_OscConfig+0xc70>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fd f920 	bl	8000984 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e1fd      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800375c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	fa93 f2a3 	rbit	r2, r3
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003778:	601a      	str	r2, [r3, #0]
  return result;
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003782:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HAL_RCC_OscConfig+0xcba>
 8003798:	4bb0      	ldr	r3, [pc, #704]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	e027      	b.n	80037ee <HAL_RCC_OscConfig+0xd0a>
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	fa93 f2a3 	rbit	r2, r3
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	4b9c      	ldr	r3, [pc, #624]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037f2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80037f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037fa:	6011      	str	r1, [r2, #0]
 80037fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003800:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	fa92 f1a2 	rbit	r1, r2
 800380a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003812:	6011      	str	r1, [r2, #0]
  return result;
 8003814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003818:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	fab2 f282 	clz	r2, r2
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	f042 0220 	orr.w	r2, r2, #32
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	f002 021f 	and.w	r2, r2, #31
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f202 	lsl.w	r2, r1, r2
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d182      	bne.n	8003740 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383a:	4b88      	ldr	r3, [pc, #544]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	430b      	orrs	r3, r1
 800385c:	497f      	ldr	r1, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800386a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800386e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	fa93 f2a3 	rbit	r2, r3
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003886:	601a      	str	r2, [r3, #0]
  return result;
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003890:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800389c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	461a      	mov	r2, r3
 80038a4:	2301      	movs	r3, #1
 80038a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd f86c 	bl	8000984 <HAL_GetTick>
 80038ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fd f867 	bl	8000984 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e144      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f2a3 	rbit	r2, r3
 80038e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038ea:	601a      	str	r2, [r3, #0]
  return result;
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_OscConfig+0xe2c>
 800390a:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e027      	b.n	8003960 <HAL_RCC_OscConfig+0xe7c>
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003922:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800393e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003964:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800396c:	6011      	str	r1, [r2, #0]
 800396e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003972:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	fa92 f1a2 	rbit	r1, r2
 800397c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003980:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003984:	6011      	str	r1, [r2, #0]
  return result;
 8003986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d082      	beq.n	80038b2 <HAL_RCC_OscConfig+0xdce>
 80039ac:	e0cf      	b.n	8003b4e <HAL_RCC_OscConfig+0x106a>
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	fa93 f2a3 	rbit	r2, r3
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039d2:	601a      	str	r2, [r3, #0]
  return result;
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	461a      	mov	r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fc ffc6 	bl	8000984 <HAL_GetTick>
 80039f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039fc:	e009      	b.n	8003a12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fc ffc1 	bl	8000984 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e09e      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a36:	601a      	str	r2, [r3, #0]
  return result;
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d104      	bne.n	8003a60 <HAL_RCC_OscConfig+0xf7c>
 8003a56:	4b01      	ldr	r3, [pc, #4]	; (8003a5c <HAL_RCC_OscConfig+0xf78>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	e029      	b.n	8003ab0 <HAL_RCC_OscConfig+0xfcc>
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fa93 f2a3 	rbit	r2, r3
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	fa93 f2a3 	rbit	r2, r3
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_OscConfig+0x1078>)
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ab8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	fa92 f1a2 	rbit	r1, r2
 8003acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ad4:	6011      	str	r1, [r2, #0]
  return result;
 8003ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ada:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	fab2 f282 	clz	r2, r2
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f002 021f 	and.w	r2, r2, #31
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d180      	bne.n	80039fe <HAL_RCC_OscConfig+0xf1a>
 8003afc:	e027      	b.n	8003b4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e01e      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_OscConfig+0x1078>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b09e      	sub	sp, #120	; 0x78
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e162      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b90      	ldr	r3, [pc, #576]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b8d      	ldr	r3, [pc, #564]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 0207 	bic.w	r2, r3, #7
 8003b8e:	498b      	ldr	r1, [pc, #556]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e14a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb4:	4b82      	ldr	r3, [pc, #520]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	497f      	ldr	r1, [pc, #508]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80dc 	beq.w	8003d8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d13c      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xf6>
 8003bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d102      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xa6>
 8003c00:	4b6f      	ldr	r3, [pc, #444]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	e00f      	b.n	8003c26 <HAL_RCC_ClockConfig+0xc6>
 8003c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	667b      	str	r3, [r7, #100]	; 0x64
 8003c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c18:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c22:	4b67      	ldr	r3, [pc, #412]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0220 	orr.w	r2, r2, #32
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d17b      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0f3      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d13c      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x178>
 8003c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d102      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x128>
 8003c82:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x148>
 8003c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	647b      	str	r3, [r7, #68]	; 0x44
 8003c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca4:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cac:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb0:	fa92 f2a2 	rbit	r2, r2
 8003cb4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cb8:	fab2 f282 	clz	r2, r2
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f002 021f 	and.w	r2, r2, #31
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f202 	lsl.w	r2, r1, r2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d13a      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b2      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x1a0>
 8003cfa:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	e00d      	b.n	8003d1c <HAL_RCC_ClockConfig+0x1bc>
 8003d00:	2302      	movs	r3, #2
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	61ba      	str	r2, [r7, #24]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	fa92 f2a2 	rbit	r2, r2
 8003d26:	617a      	str	r2, [r7, #20]
  return result;
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	fab2 f282 	clz	r2, r2
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f042 0220 	orr.w	r2, r2, #32
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	f002 021f 	and.w	r2, r2, #31
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e079      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	491a      	ldr	r1, [pc, #104]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fc fe12 	bl	8000984 <HAL_GetTick>
 8003d60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fc fe0e 	bl	8000984 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e061      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d214      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4906      	ldr	r1, [pc, #24]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e040      	b.n	8003e3e <HAL_RCC_ClockConfig+0x2de>
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_ClockConfig+0x2e8>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	491a      	ldr	r1, [pc, #104]	; (8003e48 <HAL_RCC_ClockConfig+0x2e8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <HAL_RCC_ClockConfig+0x2e8>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4912      	ldr	r1, [pc, #72]	; (8003e48 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e02:	f000 f829 	bl	8003e58 <HAL_RCC_GetSysClockFreq>
 8003e06:	4601      	mov	r1, r0
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_RCC_ClockConfig+0x2e8>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e10:	22f0      	movs	r2, #240	; 0xf0
 8003e12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	fa92 f2a2 	rbit	r2, r2
 8003e1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	fab2 f282 	clz	r2, r2
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	40d3      	lsrs	r3, r2
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x2ec>)
 8003e28:	5cd3      	ldrb	r3, [r2, r3]
 8003e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e2e:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <HAL_RCC_ClockConfig+0x2f0>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <HAL_RCC_ClockConfig+0x2f4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fd60 	bl	80008fc <HAL_InitTick>
  
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3778      	adds	r7, #120	; 0x78
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	08008c20 	.word	0x08008c20
 8003e50:	20000000 	.word	0x20000000
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b08b      	sub	sp, #44	; 0x2c
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e72:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d002      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x30>
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d003      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x36>
 8003e86:	e03c      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e88:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e8a:	623b      	str	r3, [r7, #32]
      break;
 8003e8c:	e03c      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	fa92 f2a2 	rbit	r2, r2
 8003ea0:	607a      	str	r2, [r7, #4]
  return result;
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	fab2 f282 	clz	r2, r2
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	40d3      	lsrs	r3, r2
 8003eac:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	220f      	movs	r2, #15
 8003ebc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	fa92 f2a2 	rbit	r2, r2
 8003ec4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	fab2 f282 	clz	r2, r2
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	40d3      	lsrs	r3, r2
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ee0:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e004      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	623b      	str	r3, [r7, #32]
      break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f04:	623b      	str	r3, [r7, #32]
      break;
 8003f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f08:	6a3b      	ldr	r3, [r7, #32]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	372c      	adds	r7, #44	; 0x2c
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	08008c30 	.word	0x08008c30
 8003f24:	08008c40 	.word	0x08008c40
 8003f28:	003d0900 	.word	0x003d0900

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b092      	sub	sp, #72	; 0x48
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80d4 	beq.w	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f50:	4b4e      	ldr	r3, [pc, #312]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10e      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	4a4a      	ldr	r2, [pc, #296]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	61d3      	str	r3, [r2, #28]
 8003f68:	4b48      	ldr	r3, [pc, #288]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	4b45      	ldr	r3, [pc, #276]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d118      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f86:	4b42      	ldr	r3, [pc, #264]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a41      	ldr	r2, [pc, #260]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f92:	f7fc fcf7 	bl	8000984 <HAL_GetTick>
 8003f96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f98:	e008      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9a:	f7fc fcf3 	bl	8000984 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b64      	cmp	r3, #100	; 0x64
 8003fa6:	d901      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e169      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb8:	4b34      	ldr	r3, [pc, #208]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8084 	beq.w	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d07c      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	461a      	mov	r2, r3
 8004002:	2301      	movs	r3, #1
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800400a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	fa93 f3a3 	rbit	r3, r3
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	461a      	mov	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d04b      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fc fca3 	bl	8000984 <HAL_GetTick>
 800403e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fc fc9f 	bl	8000984 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e113      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004058:	2302      	movs	r3, #2
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
 8004064:	2302      	movs	r3, #2
 8004066:	623b      	str	r3, [r7, #32]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	fa93 f3a3 	rbit	r3, r3
 800406e:	61fb      	str	r3, [r7, #28]
  return result;
 8004070:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d108      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004086:	4b01      	ldr	r3, [pc, #4]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	e00d      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
 8004094:	10908100 	.word	0x10908100
 8004098:	2302      	movs	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	4b78      	ldr	r3, [pc, #480]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2202      	movs	r2, #2
 80040aa:	613a      	str	r2, [r7, #16]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	fa92 f2a2 	rbit	r2, r2
 80040b2:	60fa      	str	r2, [r7, #12]
  return result;
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	fab2 f282 	clz	r2, r2
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	f002 021f 	and.w	r2, r2, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f202 	lsl.w	r2, r1, r2
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0b7      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	496a      	ldr	r1, [pc, #424]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b66      	ldr	r3, [pc, #408]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4a65      	ldr	r2, [pc, #404]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004104:	4b60      	ldr	r3, [pc, #384]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	495d      	ldr	r1, [pc, #372]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004122:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	4956      	ldr	r1, [pc, #344]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004140:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	494e      	ldr	r1, [pc, #312]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	4947      	ldr	r1, [pc, #284]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416c:	4313      	orrs	r3, r2
 800416e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800417c:	4b42      	ldr	r3, [pc, #264]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	493f      	ldr	r1, [pc, #252]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f023 0220 	bic.w	r2, r3, #32
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	4938      	ldr	r1, [pc, #224]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	4930      	ldr	r1, [pc, #192]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	4929      	ldr	r1, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041f4:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	4921      	ldr	r1, [pc, #132]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	491a      	ldr	r1, [pc, #104]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004230:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	4912      	ldr	r1, [pc, #72]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	490b      	ldr	r1, [pc, #44]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425c:	4313      	orrs	r3, r2
 800425e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	4903      	ldr	r1, [pc, #12]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427a:	4313      	orrs	r3, r2
 800427c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3748      	adds	r7, #72	; 0x48
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000

0800428c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e09d      	b.n	80043da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ae:	d009      	beq.n	80042c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
 80042b6:	e005      	b.n	80042c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fa44 	bl	800076c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004304:	d902      	bls.n	800430c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e002      	b.n	8004312 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800430c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004310:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800431a:	d007      	beq.n	800432c <HAL_SPI_Init+0xa0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004324:	d002      	beq.n	800432c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	ea42 0103 	orr.w	r1, r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	f003 0204 	and.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80043a8:	ea42 0103 	orr.w	r1, r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004418:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800441c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	b29b      	uxth	r3, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	b29b      	uxth	r3, r3
 800442e:	4013      	ands	r3, r2
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004446:	b084      	sub	sp, #16
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	f107 0014 	add.w	r0, r7, #20
 8004454:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	b004      	add	sp, #16
 8004486:	4770      	bx	lr

08004488 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004488:	b480      	push	{r7}
 800448a:	b09d      	sub	sp, #116	; 0x74
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	78db      	ldrb	r3, [r3, #3]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d81f      	bhi.n	80044fa <USB_ActivateEndpoint+0x72>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <USB_ActivateEndpoint+0x38>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	08004503 	.word	0x08004503
 80044cc:	080044df 	.word	0x080044df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044dc:	e012      	b.n	8004504 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80044e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044ea:	e00b      	b.n	8004504 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044f8:	e004      	b.n	8004504 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004500:	e000      	b.n	8004504 <USB_ActivateEndpoint+0x7c>
      break;
 8004502:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	b21b      	sxth	r3, r3
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	b21a      	sxth	r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b21b      	sxth	r3, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	b21b      	sxth	r3, r3
 800454a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800455c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456c:	b29b      	uxth	r3, r3
 800456e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	7b1b      	ldrb	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 8178 	bne.w	800486a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8084 	beq.w	800468c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800458e:	b29b      	uxth	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4413      	add	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	011a      	lsls	r2, r3, #4
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	88db      	ldrh	r3, [r3, #6]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	827b      	strh	r3, [r7, #18]
 80045c6:	8a7b      	ldrh	r3, [r7, #18]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <USB_ActivateEndpoint+0x180>
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	823b      	strh	r3, [r7, #16]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	8a3b      	ldrh	r3, [r7, #16]
 80045f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004604:	b29b      	uxth	r3, r3
 8004606:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	78db      	ldrb	r3, [r3, #3]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d020      	beq.n	8004652 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004626:	81bb      	strh	r3, [r7, #12]
 8004628:	89bb      	ldrh	r3, [r7, #12]
 800462a:	f083 0320 	eor.w	r3, r3, #32
 800462e:	81bb      	strh	r3, [r7, #12]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	89bb      	ldrh	r3, [r7, #12]
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e2d5      	b.n	8004bfe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	81fb      	strh	r3, [r7, #14]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	89fb      	ldrh	r3, [r7, #14]
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
 800468a:	e2b8      	b.n	8004bfe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	4413      	add	r3, r2
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	011a      	lsls	r2, r3, #4
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	88db      	ldrh	r3, [r3, #6]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	4413      	add	r3, r2
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	4413      	add	r3, r2
 80046de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	801a      	strh	r2, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b3e      	cmp	r3, #62	; 0x3e
 80046fa:	d91d      	bls.n	8004738 <USB_ActivateEndpoint+0x2b0>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	66bb      	str	r3, [r7, #104]	; 0x68
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <USB_ActivateEndpoint+0x28e>
 8004710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004712:	3b01      	subs	r3, #1
 8004714:	66bb      	str	r3, [r7, #104]	; 0x68
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29a      	uxth	r2, r3
 800471c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471e:	b29b      	uxth	r3, r3
 8004720:	029b      	lsls	r3, r3, #10
 8004722:	b29b      	uxth	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e026      	b.n	8004786 <USB_ActivateEndpoint+0x2fe>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <USB_ActivateEndpoint+0x2ce>
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474e:	b29a      	uxth	r2, r3
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e017      	b.n	8004786 <USB_ActivateEndpoint+0x2fe>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	66bb      	str	r3, [r7, #104]	; 0x68
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <USB_ActivateEndpoint+0x2e8>
 800476a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476c:	3301      	adds	r3, #1
 800476e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29a      	uxth	r2, r3
 8004776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004778:	b29b      	uxth	r3, r3
 800477a:	029b      	lsls	r3, r3, #10
 800477c:	b29b      	uxth	r3, r3
 800477e:	4313      	orrs	r3, r2
 8004780:	b29a      	uxth	r2, r3
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	847b      	strh	r3, [r7, #34]	; 0x22
 8004794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01b      	beq.n	80047d6 <USB_ActivateEndpoint+0x34e>
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	843b      	strh	r3, [r7, #32]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	8c3b      	ldrh	r3, [r7, #32]
 80047c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d124      	bne.n	8004828 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f4:	83bb      	strh	r3, [r7, #28]
 80047f6:	8bbb      	ldrh	r3, [r7, #28]
 80047f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047fc:	83bb      	strh	r3, [r7, #28]
 80047fe:	8bbb      	ldrh	r3, [r7, #28]
 8004800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004804:	83bb      	strh	r3, [r7, #28]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8bbb      	ldrh	r3, [r7, #28]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
 8004826:	e1ea      	b.n	8004bfe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	83fb      	strh	r3, [r7, #30]
 8004840:	8bfb      	ldrh	r3, [r7, #30]
 8004842:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004846:	83fb      	strh	r3, [r7, #30]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	8bfb      	ldrh	r3, [r7, #30]
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
 8004868:	e1c9      	b.n	8004bfe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d11e      	bne.n	80048b0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
 80048ae:	e01d      	b.n	80048ec <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	441a      	add	r2, r3
 80048d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fc:	4413      	add	r3, r2
 80048fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	011a      	lsls	r2, r3, #4
 8004906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004908:	4413      	add	r3, r2
 800490a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800490e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	891b      	ldrh	r3, [r3, #8]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	657b      	str	r3, [r7, #84]	; 0x54
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	4413      	add	r3, r2
 8004932:	657b      	str	r3, [r7, #84]	; 0x54
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	011a      	lsls	r2, r3, #4
 800493a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493c:	4413      	add	r3, r2
 800493e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	895b      	ldrh	r3, [r3, #10]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	b29b      	uxth	r3, r3
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004952:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 8093 	bne.w	8004a84 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800496e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <USB_ActivateEndpoint+0x52a>
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80049c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <USB_ActivateEndpoint+0x57a>
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a20:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a28:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
 8004a82:	e0bc      	b.n	8004bfe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01d      	beq.n	8004adc <USB_ActivateEndpoint+0x654>
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004aec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01d      	beq.n	8004b34 <USB_ActivateEndpoint+0x6ac>
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	78db      	ldrb	r3, [r3, #3]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d024      	beq.n	8004b86 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b5a:	f083 0320 	eor.w	r3, r3, #32
 8004b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]
 8004b84:	e01d      	b.n	8004bc2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004bfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3774      	adds	r7, #116	; 0x74
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b08d      	sub	sp, #52	; 0x34
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	7b1b      	ldrb	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 808e 	bne.w	8004d40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d044      	beq.n	8004cb6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	81bb      	strh	r3, [r7, #12]
 8004c3a:	89bb      	ldrh	r3, [r7, #12]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01b      	beq.n	8004c7c <USB_DeactivateEndpoint+0x6c>
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	817b      	strh	r3, [r7, #10]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	897b      	ldrh	r3, [r7, #10]
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c92:	813b      	strh	r3, [r7, #8]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	e192      	b.n	8004fdc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	827b      	strh	r3, [r7, #18]
 8004cc4:	8a7b      	ldrh	r3, [r7, #18]
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <USB_DeactivateEndpoint+0xf6>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce4:	823b      	strh	r3, [r7, #16]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	8a3b      	ldrh	r3, [r7, #16]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1c:	81fb      	strh	r3, [r7, #14]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	441a      	add	r2, r3
 8004d28:	89fb      	ldrh	r3, [r7, #14]
 8004d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8013      	strh	r3, [r2, #0]
 8004d3e:	e14d      	b.n	8004fdc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f040 80a5 	bne.w	8004e94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	843b      	strh	r3, [r7, #32]
 8004d58:	8c3b      	ldrh	r3, [r7, #32]
 8004d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01b      	beq.n	8004d9a <USB_DeactivateEndpoint+0x18a>
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	83fb      	strh	r3, [r7, #30]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	8bfb      	ldrh	r3, [r7, #30]
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	83bb      	strh	r3, [r7, #28]
 8004da8:	8bbb      	ldrh	r3, [r7, #28]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <USB_DeactivateEndpoint+0x1da>
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc8:	837b      	strh	r3, [r7, #26]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8b7b      	ldrh	r3, [r7, #26]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	833b      	strh	r3, [r7, #24]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	8b3b      	ldrh	r3, [r7, #24]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e38:	82fb      	strh	r3, [r7, #22]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e70:	82bb      	strh	r3, [r7, #20]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	8abb      	ldrh	r3, [r7, #20]
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]
 8004e92:	e0a3      	b.n	8004fdc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ea2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01b      	beq.n	8004ee4 <USB_DeactivateEndpoint+0x2d4>
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ef2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <USB_DeactivateEndpoint+0x324>
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3734      	adds	r7, #52	; 0x34
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b0c2      	sub	sp, #264	; 0x108
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ff8:	6018      	str	r0, [r3, #0]
 8004ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005002:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	f040 86b7 	bne.w	8005d84 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	429a      	cmp	r2, r3
 8005030:	d908      	bls.n	8005044 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005042:	e007      	b.n	8005054 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	7b1b      	ldrb	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d13a      	bne.n	80050da <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6959      	ldr	r1, [r3, #20]
 8005070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	88da      	ldrh	r2, [r3, #6]
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005080:	b29b      	uxth	r3, r3
 8005082:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005086:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	f001 fc8c 	bl	80069a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	011a      	lsls	r2, r3, #4
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4413      	add	r3, r2
 80050c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	f000 be1f 	b.w	8005d18 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	78db      	ldrb	r3, [r3, #3]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	f040 8462 	bne.w	80059b0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	f240 83df 	bls.w	80058c8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800510a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 81c7 	beq.w	800553a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
 80051b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d177      	bne.n	80052b8 <USB_EPStartXfer+0x2ce>
 80051c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	4413      	add	r3, r2
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	011a      	lsls	r2, r3, #4
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800520e:	b29a      	uxth	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005218:	2b3e      	cmp	r3, #62	; 0x3e
 800521a:	d921      	bls.n	8005260 <USB_EPStartXfer+0x276>
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <USB_EPStartXfer+0x252>
 8005232:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005236:	3b01      	subs	r3, #1
 8005238:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29a      	uxth	r2, r3
 8005242:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005246:	b29b      	uxth	r3, r3
 8005248:	029b      	lsls	r3, r3, #10
 800524a:	b29b      	uxth	r3, r3
 800524c:	4313      	orrs	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005258:	b29a      	uxth	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e050      	b.n	8005302 <USB_EPStartXfer+0x318>
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <USB_EPStartXfer+0x294>
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29a      	uxth	r2, r3
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e041      	b.n	8005302 <USB_EPStartXfer+0x318>
 800527e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <USB_EPStartXfer+0x2b4>
 8005294:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005298:	3301      	adds	r3, #1
 800529a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	029b      	lsls	r3, r3, #10
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	e024      	b.n	8005302 <USB_EPStartXfer+0x318>
 80052b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d11c      	bne.n	8005302 <USB_EPStartXfer+0x318>
 80052c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	4413      	add	r3, r2
 80052de:	633b      	str	r3, [r7, #48]	; 0x30
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	011a      	lsls	r2, r3, #4
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	895b      	ldrh	r3, [r3, #10]
 800530e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6959      	ldr	r1, [r3, #20]
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005322:	b29b      	uxth	r3, r3
 8005324:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005328:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800532c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005330:	6800      	ldr	r0, [r0, #0]
 8005332:	f001 fb39 	bl	80069a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005346:	441a      	add	r2, r3
 8005348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	429a      	cmp	r2, r3
 800536e:	d90f      	bls.n	8005390 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005380:	1ad2      	subs	r2, r2, r3
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	621a      	str	r2, [r3, #32]
 800538e:	e00e      	b.n	80053ae <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d177      	bne.n	80054ae <USB_EPStartXfer+0x4c4>
 80053be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	011a      	lsls	r2, r3, #4
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005404:	b29a      	uxth	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540e:	2b3e      	cmp	r3, #62	; 0x3e
 8005410:	d921      	bls.n	8005456 <USB_EPStartXfer+0x46c>
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <USB_EPStartXfer+0x448>
 8005428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542c:	3b01      	subs	r3, #1
 800542e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29a      	uxth	r2, r3
 8005438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543c:	b29b      	uxth	r3, r3
 800543e:	029b      	lsls	r3, r3, #10
 8005440:	b29b      	uxth	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544e:	b29a      	uxth	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	e056      	b.n	8005504 <USB_EPStartXfer+0x51a>
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <USB_EPStartXfer+0x48a>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546c:	b29a      	uxth	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e047      	b.n	8005504 <USB_EPStartXfer+0x51a>
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <USB_EPStartXfer+0x4aa>
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548e:	3301      	adds	r3, #1
 8005490:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29a      	uxth	r2, r3
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549e:	b29b      	uxth	r3, r3
 80054a0:	029b      	lsls	r3, r3, #10
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e02a      	b.n	8005504 <USB_EPStartXfer+0x51a>
 80054ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d122      	bne.n	8005504 <USB_EPStartXfer+0x51a>
 80054be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	4413      	add	r3, r2
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	011a      	lsls	r2, r3, #4
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fe:	b29a      	uxth	r2, r3
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	891b      	ldrh	r3, [r3, #8]
 8005510:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6959      	ldr	r1, [r3, #20]
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005524:	b29b      	uxth	r3, r3
 8005526:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800552a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800552e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005532:	6800      	ldr	r0, [r0, #0]
 8005534:	f001 fa38 	bl	80069a8 <USB_WritePMA>
 8005538:	e3ee      	b.n	8005d18 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800553a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d177      	bne.n	800563a <USB_EPStartXfer+0x650>
 800554a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	64bb      	str	r3, [r7, #72]	; 0x48
 8005556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556a:	4413      	add	r3, r2
 800556c:	64bb      	str	r3, [r7, #72]	; 0x48
 800556e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	011a      	lsls	r2, r3, #4
 800557c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557e:	4413      	add	r3, r2
 8005580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
 8005586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005590:	b29a      	uxth	r2, r3
 8005592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559a:	2b3e      	cmp	r3, #62	; 0x3e
 800559c:	d921      	bls.n	80055e2 <USB_EPStartXfer+0x5f8>
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <USB_EPStartXfer+0x5d4>
 80055b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055b8:	3b01      	subs	r3, #1
 80055ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e056      	b.n	8005690 <USB_EPStartXfer+0x6a6>
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <USB_EPStartXfer+0x616>
 80055ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e047      	b.n	8005690 <USB_EPStartXfer+0x6a6>
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <USB_EPStartXfer+0x636>
 8005616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800561a:	3301      	adds	r3, #1
 800561c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29b      	uxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b29a      	uxth	r2, r3
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	801a      	strh	r2, [r3, #0]
 8005638:	e02a      	b.n	8005690 <USB_EPStartXfer+0x6a6>
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d122      	bne.n	8005690 <USB_EPStartXfer+0x6a6>
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	653b      	str	r3, [r7, #80]	; 0x50
 8005656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566a:	4413      	add	r3, r2
 800566c:	653b      	str	r3, [r7, #80]	; 0x50
 800566e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	011a      	lsls	r2, r3, #4
 800567c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567e:	4413      	add	r3, r2
 8005680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	b29a      	uxth	r2, r3
 800568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	891b      	ldrh	r3, [r3, #8]
 800569c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6959      	ldr	r1, [r3, #20]
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80056b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	f001 f972 	bl	80069a8 <USB_WritePMA>
            ep->xfer_buff += len;
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d4:	441a      	add	r2, r3
 80056d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d90f      	bls.n	800571e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80056fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	621a      	str	r2, [r3, #32]
 800571c:	e00e      	b.n	800573c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
 8005748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d177      	bne.n	8005848 <USB_EPStartXfer+0x85e>
 8005758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	63bb      	str	r3, [r7, #56]	; 0x38
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	4413      	add	r3, r2
 800577a:	63bb      	str	r3, [r7, #56]	; 0x38
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	4413      	add	r3, r2
 800578e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	2b3e      	cmp	r3, #62	; 0x3e
 80057aa:	d921      	bls.n	80057f0 <USB_EPStartXfer+0x806>
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USB_EPStartXfer+0x7e2>
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	029b      	lsls	r3, r3, #10
 80057da:	b29b      	uxth	r3, r3
 80057dc:	4313      	orrs	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e050      	b.n	8005892 <USB_EPStartXfer+0x8a8>
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <USB_EPStartXfer+0x824>
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e041      	b.n	8005892 <USB_EPStartXfer+0x8a8>
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <USB_EPStartXfer+0x844>
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	3301      	adds	r3, #1
 800582a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	b29b      	uxth	r3, r3
 800583a:	029b      	lsls	r3, r3, #10
 800583c:	b29b      	uxth	r3, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	e024      	b.n	8005892 <USB_EPStartXfer+0x8a8>
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d11c      	bne.n	8005892 <USB_EPStartXfer+0x8a8>
 8005858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005866:	b29b      	uxth	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586c:	4413      	add	r3, r2
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	011a      	lsls	r2, r3, #4
 800587e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005880:	4413      	add	r3, r2
 8005882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588c:	b29a      	uxth	r2, r3
 800588e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005890:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	895b      	ldrh	r3, [r3, #10]
 800589e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6959      	ldr	r1, [r3, #20]
 80058ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058c0:	6800      	ldr	r0, [r0, #0]
 80058c2:	f001 f871 	bl	80069a8 <USB_WritePMA>
 80058c6:	e227      	b.n	8005d18 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80058d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005930:	b29b      	uxth	r3, r3
 8005932:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005954:	4413      	add	r3, r2
 8005956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	011a      	lsls	r2, r3, #4
 8005966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005968:	4413      	add	r3, r2
 800596a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800596e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005974:	b29a      	uxth	r2, r3
 8005976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005978:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	891b      	ldrh	r3, [r3, #8]
 8005986:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800598a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6959      	ldr	r1, [r3, #20]
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599a:	b29b      	uxth	r3, r3
 800599c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059a8:	6800      	ldr	r0, [r0, #0]
 80059aa:	f000 fffd 	bl	80069a8 <USB_WritePMA>
 80059ae:	e1b3      	b.n	8005d18 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80c6 	beq.w	8005b82 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	673b      	str	r3, [r7, #112]	; 0x70
 8005a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d177      	bne.n	8005b02 <USB_EPStartXfer+0xb18>
 8005a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a32:	4413      	add	r3, r2
 8005a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	011a      	lsls	r2, r3, #4
 8005a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a62:	2b3e      	cmp	r3, #62	; 0x3e
 8005a64:	d921      	bls.n	8005aaa <USB_EPStartXfer+0xac0>
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <USB_EPStartXfer+0xa9c>
 8005a7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a80:	3b01      	subs	r3, #1
 8005a82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	e050      	b.n	8005b4c <USB_EPStartXfer+0xb62>
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <USB_EPStartXfer+0xade>
 8005ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	e041      	b.n	8005b4c <USB_EPStartXfer+0xb62>
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <USB_EPStartXfer+0xafe>
 8005ade:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e024      	b.n	8005b4c <USB_EPStartXfer+0xb62>
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d11c      	bne.n	8005b4c <USB_EPStartXfer+0xb62>
 8005b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b26:	4413      	add	r3, r2
 8005b28:	673b      	str	r3, [r7, #112]	; 0x70
 8005b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	895b      	ldrh	r3, [r3, #10]
 8005b58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6959      	ldr	r1, [r3, #20]
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	f000 ff14 	bl	80069a8 <USB_WritePMA>
 8005b80:	e0ca      	b.n	8005d18 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d177      	bne.n	8005c82 <USB_EPStartXfer+0xc98>
 8005b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bb2:	4413      	add	r3, r2
 8005bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	011a      	lsls	r2, r3, #4
 8005bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be2:	2b3e      	cmp	r3, #62	; 0x3e
 8005be4:	d921      	bls.n	8005c2a <USB_EPStartXfer+0xc40>
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <USB_EPStartXfer+0xc1c>
 8005bfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c00:	3b01      	subs	r3, #1
 8005c02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e05c      	b.n	8005ce4 <USB_EPStartXfer+0xcfa>
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <USB_EPStartXfer+0xc5e>
 8005c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e04d      	b.n	8005ce4 <USB_EPStartXfer+0xcfa>
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <USB_EPStartXfer+0xc7e>
 8005c5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c62:	3301      	adds	r3, #1
 8005c64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e030      	b.n	8005ce4 <USB_EPStartXfer+0xcfa>
 8005c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d128      	bne.n	8005ce4 <USB_EPStartXfer+0xcfa>
 8005c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	011a      	lsls	r2, r3, #4
 8005cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ce2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	891b      	ldrh	r3, [r3, #8]
 8005cf0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6959      	ldr	r1, [r3, #20]
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d12:	6800      	ldr	r0, [r0, #0]
 8005d14:	f000 fe48 	bl	80069a8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3e:	817b      	strh	r3, [r7, #10]
 8005d40:	897b      	ldrh	r3, [r7, #10]
 8005d42:	f083 0310 	eor.w	r3, r3, #16
 8005d46:	817b      	strh	r3, [r7, #10]
 8005d48:	897b      	ldrh	r3, [r7, #10]
 8005d4a:	f083 0320 	eor.w	r3, r3, #32
 8005d4e:	817b      	strh	r3, [r7, #10]
 8005d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
 8005d80:	f000 bcde 	b.w	8006740 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	7b1b      	ldrb	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f040 80bb 	bne.w	8005f0c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d917      	bls.n	8005de2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	619a      	str	r2, [r3, #24]
 8005de0:	e00e      	b.n	8005e00 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e24:	4413      	add	r3, r2
 8005e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	011a      	lsls	r2, r3, #4
 8005e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e60:	d924      	bls.n	8005eac <USB_EPStartXfer+0xec2>
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <USB_EPStartXfer+0xe98>
 8005e78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	f000 bc10 	b.w	80066cc <USB_EPStartXfer+0x16e2>
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10c      	bne.n	8005ece <USB_EPStartXfer+0xee4>
 8005eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e3fe      	b.n	80066cc <USB_EPStartXfer+0x16e2>
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <USB_EPStartXfer+0xf04>
 8005ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e3df      	b.n	80066cc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	f040 8218 	bne.w	800634e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 809d 	bne.w	800606a <USB_EPStartXfer+0x1080>
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f54:	4413      	add	r3, r2
 8005f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	011a      	lsls	r2, r3, #4
 8005f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b3e      	cmp	r3, #62	; 0x3e
 8005f98:	d92b      	bls.n	8005ff2 <USB_EPStartXfer+0x1008>
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <USB_EPStartXfer+0xfe0>
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	029b      	lsls	r3, r3, #10
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e070      	b.n	80060d4 <USB_EPStartXfer+0x10ea>
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10c      	bne.n	800601c <USB_EPStartXfer+0x1032>
 8006002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006012:	b29a      	uxth	r2, r3
 8006014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	e05b      	b.n	80060d4 <USB_EPStartXfer+0x10ea>
 800601c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800602e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d004      	beq.n	800604c <USB_EPStartXfer+0x1062>
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006046:	3301      	adds	r3, #1
 8006048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800604c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	b29b      	uxth	r3, r3
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	b29b      	uxth	r3, r3
 800605e:	4313      	orrs	r3, r2
 8006060:	b29a      	uxth	r2, r3
 8006062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e034      	b.n	80060d4 <USB_EPStartXfer+0x10ea>
 800606a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d12c      	bne.n	80060d4 <USB_EPStartXfer+0x10ea>
 800607a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006096:	b29b      	uxth	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800609e:	4413      	add	r3, r2
 80060a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	011a      	lsls	r2, r3, #4
 80060b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060b6:	4413      	add	r3, r2
 80060b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 809d 	bne.w	800622e <USB_EPStartXfer+0x1244>
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006110:	b29b      	uxth	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006118:	4413      	add	r3, r2
 800611a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	011a      	lsls	r2, r3, #4
 800612c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006130:	4413      	add	r3, r2
 8006132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006136:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800613a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006146:	b29a      	uxth	r2, r3
 8006148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b3e      	cmp	r3, #62	; 0x3e
 800615c:	d92b      	bls.n	80061b6 <USB_EPStartXfer+0x11cc>
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <USB_EPStartXfer+0x11a4>
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006188:	3b01      	subs	r3, #1
 800618a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800618e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e069      	b.n	800628a <USB_EPStartXfer+0x12a0>
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10c      	bne.n	80061e0 <USB_EPStartXfer+0x11f6>
 80061c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e054      	b.n	800628a <USB_EPStartXfer+0x12a0>
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	085b      	lsrs	r3, r3, #1
 80061ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <USB_EPStartXfer+0x1226>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	3301      	adds	r3, #1
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29a      	uxth	r2, r3
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	b29b      	uxth	r3, r3
 800621e:	029b      	lsls	r3, r3, #10
 8006220:	b29b      	uxth	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	e02d      	b.n	800628a <USB_EPStartXfer+0x12a0>
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d125      	bne.n	800628a <USB_EPStartXfer+0x12a0>
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624c:	b29b      	uxth	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006254:	4413      	add	r3, r2
 8006256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	011a      	lsls	r2, r3, #4
 8006268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800626c:	4413      	add	r3, r2
 800626e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006288:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8218 	beq.w	80066cc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <USB_EPStartXfer+0x12ea>
 80062c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10d      	bne.n	80062f0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 81f5 	bne.w	80066cc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 81ee 	bne.w	80066cc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	441a      	add	r2, r3
 8006334:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006344:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006348:	b29b      	uxth	r3, r3
 800634a:	8013      	strh	r3, [r2, #0]
 800634c:	e1be      	b.n	80066cc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	78db      	ldrb	r3, [r3, #3]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f040 81b4 	bne.w	80066c8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	429a      	cmp	r2, r3
 800637a:	d917      	bls.n	80063ac <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800637c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	619a      	str	r2, [r3, #24]
 80063aa:	e00e      	b.n	80063ca <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2200      	movs	r2, #0
 80063c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 8085 	bne.w	80064e6 <USB_EPStartXfer+0x14fc>
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006400:	4413      	add	r3, r2
 8006402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	011a      	lsls	r2, r3, #4
 8006414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006418:	4413      	add	r3, r2
 800641a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800641e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642e:	b29a      	uxth	r2, r3
 8006430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643a:	2b3e      	cmp	r3, #62	; 0x3e
 800643c:	d923      	bls.n	8006486 <USB_EPStartXfer+0x149c>
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <USB_EPStartXfer+0x1474>
 8006454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006458:	3b01      	subs	r3, #1
 800645a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800645e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800646a:	b29b      	uxth	r3, r3
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	b29b      	uxth	r3, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	b29b      	uxth	r3, r3
 8006474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647c:	b29a      	uxth	r2, r3
 800647e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e060      	b.n	8006548 <USB_EPStartXfer+0x155e>
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10c      	bne.n	80064a8 <USB_EPStartXfer+0x14be>
 800648e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e04f      	b.n	8006548 <USB_EPStartXfer+0x155e>
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <USB_EPStartXfer+0x14de>
 80064be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c2:	3301      	adds	r3, #1
 80064c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	029b      	lsls	r3, r3, #10
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e030      	b.n	8006548 <USB_EPStartXfer+0x155e>
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d128      	bne.n	8006548 <USB_EPStartXfer+0x155e>
 80064f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800651a:	4413      	add	r3, r2
 800651c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	011a      	lsls	r2, r3, #4
 800652e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006532:	4413      	add	r3, r2
 8006534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 8085 	bne.w	8006672 <USB_EPStartXfer+0x1688>
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800658c:	4413      	add	r3, r2
 800658e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	011a      	lsls	r2, r3, #4
 80065a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065a4:	4413      	add	r3, r2
 80065a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c6:	2b3e      	cmp	r3, #62	; 0x3e
 80065c8:	d923      	bls.n	8006612 <USB_EPStartXfer+0x1628>
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <USB_EPStartXfer+0x1600>
 80065e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e4:	3b01      	subs	r3, #1
 80065e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	029b      	lsls	r3, r3, #10
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e05c      	b.n	80066cc <USB_EPStartXfer+0x16e2>
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10c      	bne.n	8006634 <USB_EPStartXfer+0x164a>
 800661a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006630:	801a      	strh	r2, [r3, #0]
 8006632:	e04b      	b.n	80066cc <USB_EPStartXfer+0x16e2>
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800663e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <USB_EPStartXfer+0x166a>
 800664a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800664e:	3301      	adds	r3, #1
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29a      	uxth	r2, r3
 800665c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006660:	b29b      	uxth	r3, r3
 8006662:	029b      	lsls	r3, r3, #10
 8006664:	b29b      	uxth	r3, r3
 8006666:	4313      	orrs	r3, r2
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e02c      	b.n	80066cc <USB_EPStartXfer+0x16e2>
 8006672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d124      	bne.n	80066cc <USB_EPStartXfer+0x16e2>
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006690:	b29b      	uxth	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006698:	4413      	add	r3, r2
 800669a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800669e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	011a      	lsls	r2, r3, #4
 80066ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066b0:	4413      	add	r3, r2
 80066b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066be:	b29a      	uxth	r2, r3
 80066c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e001      	b.n	80066cc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e03a      	b.n	8006742 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80066f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006702:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006706:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800670a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800670e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800672c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673c:	b29b      	uxth	r3, r3
 800673e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d020      	beq.n	80067a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006774:	81bb      	strh	r3, [r7, #12]
 8006776:	89bb      	ldrh	r3, [r7, #12]
 8006778:	f083 0310 	eor.w	r3, r3, #16
 800677c:	81bb      	strh	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	441a      	add	r2, r3
 8006788:	89bb      	ldrh	r3, [r7, #12]
 800678a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679a:	b29b      	uxth	r3, r3
 800679c:	8013      	strh	r3, [r2, #0]
 800679e:	e01f      	b.n	80067e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	81fb      	strh	r3, [r7, #14]
 80067b8:	89fb      	ldrh	r3, [r7, #14]
 80067ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067be:	81fb      	strh	r3, [r7, #14]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	89fb      	ldrh	r3, [r7, #14]
 80067cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	7b1b      	ldrb	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 809d 	bne.w	800693c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04c      	beq.n	80068a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	823b      	strh	r3, [r7, #16]
 8006818:	8a3b      	ldrh	r3, [r7, #16]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01b      	beq.n	800685a <USB_EPClearStall+0x6c>
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006838:	81fb      	strh	r3, [r7, #14]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	441a      	add	r2, r3
 8006844:	89fb      	ldrh	r3, [r7, #14]
 8006846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006856:	b29b      	uxth	r3, r3
 8006858:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	78db      	ldrb	r3, [r3, #3]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d06c      	beq.n	800693c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	81bb      	strh	r3, [r7, #12]
 800687a:	89bb      	ldrh	r3, [r7, #12]
 800687c:	f083 0320 	eor.w	r3, r3, #32
 8006880:	81bb      	strh	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	89bb      	ldrh	r3, [r7, #12]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
 80068a2:	e04b      	b.n	800693c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	82fb      	strh	r3, [r7, #22]
 80068b2:	8afb      	ldrh	r3, [r7, #22]
 80068b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01b      	beq.n	80068f4 <USB_EPClearStall+0x106>
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	82bb      	strh	r3, [r7, #20]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	8abb      	ldrh	r3, [r7, #20]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	827b      	strh	r3, [r7, #18]
 800690c:	8a7b      	ldrh	r3, [r7, #18]
 800690e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006912:	827b      	strh	r3, [r7, #18]
 8006914:	8a7b      	ldrh	r3, [r7, #18]
 8006916:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800691a:	827b      	strh	r3, [r7, #18]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	8a7b      	ldrh	r3, [r7, #18]
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006996:	b29b      	uxth	r3, r3
 8006998:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800699a:	68fb      	ldr	r3, [r7, #12]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b08b      	sub	sp, #44	; 0x2c
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4611      	mov	r1, r2
 80069b4:	461a      	mov	r2, r3
 80069b6:	460b      	mov	r3, r1
 80069b8:	80fb      	strh	r3, [r7, #6]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80069be:	88bb      	ldrh	r3, [r7, #4]
 80069c0:	3301      	adds	r3, #1
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	005a      	lsls	r2, r3, #1
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	e01e      	b.n	8006a20 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	3301      	adds	r3, #1
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	b21a      	sxth	r2, r3
 80069f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	b21b      	sxth	r3, r3
 80069fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	8a7a      	ldrh	r2, [r7, #18]
 8006a00:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	3302      	adds	r3, #2
 8006a06:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	3301      	adds	r3, #1
 8006a12:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1dd      	bne.n	80069e2 <USB_WritePMA+0x3a>
  }
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	372c      	adds	r7, #44	; 0x2c
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b08b      	sub	sp, #44	; 0x2c
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	460b      	mov	r3, r1
 8006a44:	80fb      	strh	r3, [r7, #6]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a4a:	88bb      	ldrh	r3, [r7, #4]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	005a      	lsls	r2, r3, #1
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e01b      	b.n	8006aa6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	3302      	adds	r3, #2
 8006a7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e0      	bne.n	8006a6e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006aac:	88bb      	ldrh	r3, [r7, #4]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	701a      	strb	r2, [r3, #0]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	372c      	adds	r7, #44	; 0x2c
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7c1b      	ldrb	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d115      	bne.n	8006b18 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af0:	2202      	movs	r2, #2
 8006af2:	2181      	movs	r1, #129	; 0x81
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 febe 	bl	8008876 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b04:	2202      	movs	r2, #2
 8006b06:	2101      	movs	r1, #1
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 feb4 	bl	8008876 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006b16:	e012      	b.n	8006b3e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b18:	2340      	movs	r3, #64	; 0x40
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	2181      	movs	r1, #129	; 0x81
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 fea9 	bl	8008876 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b2a:	2340      	movs	r3, #64	; 0x40
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	2101      	movs	r1, #1
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fea0 	bl	8008876 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b3e:	2308      	movs	r3, #8
 8006b40:	2203      	movs	r2, #3
 8006b42:	2182      	movs	r1, #130	; 0x82
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fe96 	bl	8008876 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b54:	f001 ffb8 	bl	8008ac8 <USBD_static_malloc>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	73fb      	strb	r3, [r7, #15]
 8006b6e:	e026      	b.n	8006bbe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7c1b      	ldrb	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 ff57 	bl	8008a5a <USBD_LL_PrepareReceive>
 8006bac:	e007      	b.n	8006bbe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 ff4e 	bl	8008a5a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bd8:	2181      	movs	r1, #129	; 0x81
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fe71 	bl	80088c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006be6:	2101      	movs	r1, #1
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fe6a 	bl	80088c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bf6:	2182      	movs	r1, #130	; 0x82
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fe62 	bl	80088c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 ff60 	bl	8008ae4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c46:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d039      	beq.n	8006cd4 <USBD_CDC_Setup+0x9e>
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d17f      	bne.n	8006d64 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	88db      	ldrh	r3, [r3, #6]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d029      	beq.n	8006cc0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da11      	bge.n	8006c9a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	88d2      	ldrh	r2, [r2, #6]
 8006c88:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c8a:	6939      	ldr	r1, [r7, #16]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fa13 	bl	80080be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c98:	e06b      	b.n	8006d72 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	785a      	ldrb	r2, [r3, #1]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	88db      	ldrh	r3, [r3, #6]
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cb0:	6939      	ldr	r1, [r7, #16]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	88db      	ldrh	r3, [r3, #6]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fa2e 	bl	800811a <USBD_CtlPrepareRx>
      break;
 8006cbe:	e058      	b.n	8006d72 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	7850      	ldrb	r0, [r2, #1]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	4798      	blx	r3
      break;
 8006cd2:	e04e      	b.n	8006d72 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b0b      	cmp	r3, #11
 8006cda:	d02e      	beq.n	8006d3a <USBD_CDC_Setup+0x104>
 8006cdc:	2b0b      	cmp	r3, #11
 8006cde:	dc38      	bgt.n	8006d52 <USBD_CDC_Setup+0x11c>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <USBD_CDC_Setup+0xb4>
 8006ce4:	2b0a      	cmp	r3, #10
 8006ce6:	d014      	beq.n	8006d12 <USBD_CDC_Setup+0xdc>
 8006ce8:	e033      	b.n	8006d52 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d107      	bne.n	8006d04 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cf4:	f107 030c 	add.w	r3, r7, #12
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f9de 	bl	80080be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d02:	e02e      	b.n	8006d62 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 f96e 	bl	8007fe8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d10:	e027      	b.n	8006d62 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d107      	bne.n	8006d2c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d1c:	f107 030f 	add.w	r3, r7, #15
 8006d20:	2201      	movs	r2, #1
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f9ca 	bl	80080be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d2a:	e01a      	b.n	8006d62 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f95a 	bl	8007fe8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	75fb      	strb	r3, [r7, #23]
          break;
 8006d38:	e013      	b.n	8006d62 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d00d      	beq.n	8006d60 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f94e 	bl	8007fe8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d50:	e006      	b.n	8006d60 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f947 	bl	8007fe8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5e:	e000      	b.n	8006d62 <USBD_CDC_Setup+0x12c>
          break;
 8006d60:	bf00      	nop
      }
      break;
 8006d62:	e006      	b.n	8006d72 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 f93e 	bl	8007fe8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d70:	bf00      	nop
  }

  return ret;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d96:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d03a      	beq.n	8006e18 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	331c      	adds	r3, #28
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d029      	beq.n	8006e0c <USBD_CDC_DataIn+0x90>
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	331c      	adds	r3, #28
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	78f9      	ldrb	r1, [r7, #3]
 8006dcc:	68b8      	ldr	r0, [r7, #8]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4403      	add	r3, r0
 8006dd8:	3338      	adds	r3, #56	; 0x38
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d110      	bne.n	8006e0c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	331c      	adds	r3, #28
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dfe:	78f9      	ldrb	r1, [r7, #3]
 8006e00:	2300      	movs	r3, #0
 8006e02:	2200      	movs	r2, #0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fe05 	bl	8008a14 <USBD_LL_Transmit>
 8006e0a:	e003      	b.n	8006e14 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e18:	2302      	movs	r3, #2
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fe30 	bl	8008aa0 <USBD_LL_GetRxDataSize>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00d      	beq.n	8006e6e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e66:	4611      	mov	r1, r2
 8006e68:	4798      	blx	r3

    return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e000      	b.n	8006e70 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e6e:	2302      	movs	r3, #2
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e86:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d015      	beq.n	8006ebe <USBD_CDC_EP0_RxReady+0x46>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e98:	2bff      	cmp	r3, #255	; 0xff
 8006e9a:	d010      	beq.n	8006ebe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006eaa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2243      	movs	r2, #67	; 0x43
 8006ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20000094 	.word	0x20000094

08006ee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2243      	movs	r2, #67	; 0x43
 8006ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000050 	.word	0x20000050

08006f08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2243      	movs	r2, #67	; 0x43
 8006f14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f16:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	200000d8 	.word	0x200000d8

08006f28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220a      	movs	r2, #10
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	2000000c 	.word	0x2000000c

08006f48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b087      	sub	sp, #28
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01c      	beq.n	8007026 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d115      	bne.n	8007022 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007014:	b29b      	uxth	r3, r3
 8007016:	2181      	movs	r1, #129	; 0x81
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fcfb 	bl	8008a14 <USBD_LL_Transmit>

      return USBD_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	e002      	b.n	8007028 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d017      	beq.n	800707a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7c1b      	ldrb	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800705c:	2101      	movs	r1, #1
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fcfb 	bl	8008a5a <USBD_LL_PrepareReceive>
 8007064:	e007      	b.n	8007076 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	2101      	movs	r1, #1
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fcf2 	bl	8008a5a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e000      	b.n	800707c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800707a:	2302      	movs	r3, #2
  }
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007098:	2302      	movs	r3, #2
 800709a:	e01a      	b.n	80070d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	79fa      	ldrb	r2, [r7, #7]
 80070c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f001 fb5e 	bl	800878c <USBD_LL_Init>

  return USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d006      	beq.n	80070fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	e001      	b.n	8007100 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070fc:	2302      	movs	r3, #2
 80070fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fb92 	bl	8008840 <USBD_LL_Start>

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00c      	beq.n	8007170 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	78fa      	ldrb	r2, [r7, #3]
 8007160:	4611      	mov	r1, r2
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	4611      	mov	r1, r2
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fedb 	bl	8007f6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071c6:	461a      	mov	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d016      	beq.n	800720a <USBD_LL_SetupStage+0x6a>
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d81c      	bhi.n	800721a <USBD_LL_SetupStage+0x7a>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <USBD_LL_SetupStage+0x4a>
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d008      	beq.n	80071fa <USBD_LL_SetupStage+0x5a>
 80071e8:	e017      	b.n	800721a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f9ce 	bl	8007594 <USBD_StdDevReq>
      break;
 80071f8:	e01a      	b.n	8007230 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa30 	bl	8007668 <USBD_StdItfReq>
      break;
 8007208:	e012      	b.n	8007230 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa70 	bl	80076f8 <USBD_StdEPReq>
      break;
 8007218:	e00a      	b.n	8007230 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007220:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007224:	b2db      	uxtb	r3, r3
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fb69 	bl	8008900 <USBD_LL_StallEP>
      break;
 800722e:	bf00      	nop
  }

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	460b      	mov	r3, r1
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d14b      	bne.n	80072e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007254:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800725c:	2b03      	cmp	r3, #3
 800725e:	d134      	bne.n	80072ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d919      	bls.n	80072a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	1ad2      	subs	r2, r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007282:	429a      	cmp	r2, r3
 8007284:	d203      	bcs.n	800728e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800728a:	b29b      	uxth	r3, r3
 800728c:	e002      	b.n	8007294 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007292:	b29b      	uxth	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 ff5c 	bl	8008156 <USBD_CtlContinueRx>
 800729e:	e038      	b.n	8007312 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d105      	bne.n	80072c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 ff59 	bl	800817a <USBD_CtlSendStatus>
 80072c8:	e023      	b.n	8007312 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d11e      	bne.n	8007312 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072dc:	2100      	movs	r1, #0
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 fb0e 	bl	8008900 <USBD_LL_StallEP>
 80072e4:	e015      	b.n	8007312 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00d      	beq.n	800730e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d108      	bne.n	800730e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	7afa      	ldrb	r2, [r7, #11]
 8007306:	4611      	mov	r1, r2
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	4798      	blx	r3
 800730c:	e001      	b.n	8007312 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800730e:	2302      	movs	r3, #2
 8007310:	e000      	b.n	8007314 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	460b      	mov	r3, r1
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d17f      	bne.n	8007430 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3314      	adds	r3, #20
 8007334:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800733c:	2b02      	cmp	r3, #2
 800733e:	d15c      	bne.n	80073fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	429a      	cmp	r2, r3
 800734a:	d915      	bls.n	8007378 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	1ad2      	subs	r2, r2, r3
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	b29b      	uxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fec6 	bl	80080f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800736a:	2300      	movs	r3, #0
 800736c:	2200      	movs	r2, #0
 800736e:	2100      	movs	r1, #0
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f001 fb72 	bl	8008a5a <USBD_LL_PrepareReceive>
 8007376:	e04e      	b.n	8007416 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	6912      	ldr	r2, [r2, #16]
 8007380:	fbb3 f1f2 	udiv	r1, r3, r2
 8007384:	fb01 f202 	mul.w	r2, r1, r2
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d11c      	bne.n	80073c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d316      	bcc.n	80073c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d20f      	bcs.n	80073c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073a8:	2200      	movs	r2, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fea2 	bl	80080f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ba:	2300      	movs	r3, #0
 80073bc:	2200      	movs	r2, #0
 80073be:	2100      	movs	r1, #0
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f001 fb4a 	bl	8008a5a <USBD_LL_PrepareReceive>
 80073c6:	e026      	b.n	8007416 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d105      	bne.n	80073ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073ea:	2180      	movs	r1, #128	; 0x80
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f001 fa87 	bl	8008900 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fed4 	bl	80081a0 <USBD_CtlReceiveStatus>
 80073f8:	e00d      	b.n	8007416 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007400:	2b04      	cmp	r3, #4
 8007402:	d004      	beq.n	800740e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800740e:	2180      	movs	r1, #128	; 0x80
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f001 fa75 	bl	8008900 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800741c:	2b01      	cmp	r3, #1
 800741e:	d11d      	bne.n	800745c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fe80 	bl	8007126 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800742e:	e015      	b.n	800745c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007442:	2b03      	cmp	r3, #3
 8007444:	d108      	bne.n	8007458 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	7afa      	ldrb	r2, [r7, #11]
 8007450:	4611      	mov	r1, r2
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	4798      	blx	r3
 8007456:	e001      	b.n	800745c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007458:	2302      	movs	r3, #2
 800745a:	e000      	b.n	800745e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800746e:	2340      	movs	r3, #64	; 0x40
 8007470:	2200      	movs	r2, #0
 8007472:	2100      	movs	r1, #0
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f9fe 	bl	8008876 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2240      	movs	r2, #64	; 0x40
 8007486:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	2200      	movs	r2, #0
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f9f0 	bl	8008876 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2240      	movs	r2, #64	; 0x40
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6852      	ldr	r2, [r2, #4]
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	4611      	mov	r1, r2
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
  }

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2204      	movs	r2, #4
 8007520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007540:	2b04      	cmp	r3, #4
 8007542:	d105      	bne.n	8007550 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	2b03      	cmp	r3, #3
 800756e:	d10b      	bne.n	8007588 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d005      	beq.n	80075ba <USBD_StdDevReq+0x26>
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d84f      	bhi.n	8007652 <USBD_StdDevReq+0xbe>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <USBD_StdDevReq+0x36>
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d14b      	bne.n	8007652 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
      break;
 80075c8:	e048      	b.n	800765c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d839      	bhi.n	8007646 <USBD_StdDevReq+0xb2>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <USBD_StdDevReq+0x44>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	08007629 	.word	0x08007629
 80075dc:	0800763d 	.word	0x0800763d
 80075e0:	08007647 	.word	0x08007647
 80075e4:	08007633 	.word	0x08007633
 80075e8:	08007647 	.word	0x08007647
 80075ec:	0800760b 	.word	0x0800760b
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007647 	.word	0x08007647
 80075f8:	0800761f 	.word	0x0800761f
 80075fc:	08007615 	.word	0x08007615
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9dc 	bl	80079c0 <USBD_GetDescriptor>
          break;
 8007608:	e022      	b.n	8007650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb3f 	bl	8007c90 <USBD_SetAddress>
          break;
 8007612:	e01d      	b.n	8007650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fb7e 	bl	8007d18 <USBD_SetConfig>
          break;
 800761c:	e018      	b.n	8007650 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc07 	bl	8007e34 <USBD_GetConfig>
          break;
 8007626:	e013      	b.n	8007650 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fc37 	bl	8007e9e <USBD_GetStatus>
          break;
 8007630:	e00e      	b.n	8007650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc65 	bl	8007f04 <USBD_SetFeature>
          break;
 800763a:	e009      	b.n	8007650 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fc74 	bl	8007f2c <USBD_ClrFeature>
          break;
 8007644:	e004      	b.n	8007650 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fccd 	bl	8007fe8 <USBD_CtlError>
          break;
 800764e:	bf00      	nop
      }
      break;
 8007650:	e004      	b.n	800765c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fcc7 	bl	8007fe8 <USBD_CtlError>
      break;
 800765a:	bf00      	nop
  }

  return ret;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop

08007668 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d005      	beq.n	800768e <USBD_StdItfReq+0x26>
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d82e      	bhi.n	80076e4 <USBD_StdItfReq+0x7c>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <USBD_StdItfReq+0x26>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d12a      	bne.n	80076e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	3b01      	subs	r3, #1
 8007696:	2b02      	cmp	r3, #2
 8007698:	d81d      	bhi.n	80076d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	889b      	ldrh	r3, [r3, #4]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d813      	bhi.n	80076cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	88db      	ldrh	r3, [r3, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d110      	bne.n	80076e0 <USBD_StdItfReq+0x78>
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10d      	bne.n	80076e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd58 	bl	800817a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076ca:	e009      	b.n	80076e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc8a 	bl	8007fe8 <USBD_CtlError>
          break;
 80076d4:	e004      	b.n	80076e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc85 	bl	8007fe8 <USBD_CtlError>
          break;
 80076de:	e000      	b.n	80076e2 <USBD_StdItfReq+0x7a>
          break;
 80076e0:	bf00      	nop
      }
      break;
 80076e2:	e004      	b.n	80076ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc7e 	bl	8007fe8 <USBD_CtlError>
      break;
 80076ec:	bf00      	nop
  }

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	889b      	ldrh	r3, [r3, #4]
 800770a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d007      	beq.n	8007728 <USBD_StdEPReq+0x30>
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	f200 8146 	bhi.w	80079aa <USBD_StdEPReq+0x2b2>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <USBD_StdEPReq+0x40>
 8007722:	2b20      	cmp	r3, #32
 8007724:	f040 8141 	bne.w	80079aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      break;
 8007736:	e13d      	b.n	80079b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007740:	2b20      	cmp	r3, #32
 8007742:	d10a      	bne.n	800775a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	e12d      	b.n	80079b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d007      	beq.n	8007772 <USBD_StdEPReq+0x7a>
 8007762:	2b03      	cmp	r3, #3
 8007764:	f300 811b 	bgt.w	800799e <USBD_StdEPReq+0x2a6>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d072      	beq.n	8007852 <USBD_StdEPReq+0x15a>
 800776c:	2b01      	cmp	r3, #1
 800776e:	d03a      	beq.n	80077e6 <USBD_StdEPReq+0xee>
 8007770:	e115      	b.n	800799e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	2b02      	cmp	r3, #2
 800777a:	d002      	beq.n	8007782 <USBD_StdEPReq+0x8a>
 800777c:	2b03      	cmp	r3, #3
 800777e:	d015      	beq.n	80077ac <USBD_StdEPReq+0xb4>
 8007780:	e02b      	b.n	80077da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00c      	beq.n	80077a2 <USBD_StdEPReq+0xaa>
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	2b80      	cmp	r3, #128	; 0x80
 800778c:	d009      	beq.n	80077a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 f8b4 	bl	8008900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007798:	2180      	movs	r1, #128	; 0x80
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f8b0 	bl	8008900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077a0:	e020      	b.n	80077e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fc1f 	bl	8007fe8 <USBD_CtlError>
              break;
 80077aa:	e01b      	b.n	80077e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	885b      	ldrh	r3, [r3, #2]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10e      	bne.n	80077d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <USBD_StdEPReq+0xda>
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b80      	cmp	r3, #128	; 0x80
 80077be:	d008      	beq.n	80077d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	88db      	ldrh	r3, [r3, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 f897 	bl	8008900 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fcd1 	bl	800817a <USBD_CtlSendStatus>

              break;
 80077d8:	e004      	b.n	80077e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc03 	bl	8007fe8 <USBD_CtlError>
              break;
 80077e2:	bf00      	nop
          }
          break;
 80077e4:	e0e0      	b.n	80079a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d002      	beq.n	80077f6 <USBD_StdEPReq+0xfe>
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d015      	beq.n	8007820 <USBD_StdEPReq+0x128>
 80077f4:	e026      	b.n	8007844 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00c      	beq.n	8007816 <USBD_StdEPReq+0x11e>
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d009      	beq.n	8007816 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 f87a 	bl	8008900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800780c:	2180      	movs	r1, #128	; 0x80
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 f876 	bl	8008900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007814:	e01c      	b.n	8007850 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fbe5 	bl	8007fe8 <USBD_CtlError>
              break;
 800781e:	e017      	b.n	8007850 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	885b      	ldrh	r3, [r3, #2]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d112      	bne.n	800784e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 f881 	bl	800893e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fc9c 	bl	800817a <USBD_CtlSendStatus>
              }
              break;
 8007842:	e004      	b.n	800784e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fbce 	bl	8007fe8 <USBD_CtlError>
              break;
 800784c:	e000      	b.n	8007850 <USBD_StdEPReq+0x158>
              break;
 800784e:	bf00      	nop
          }
          break;
 8007850:	e0aa      	b.n	80079a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	2b02      	cmp	r3, #2
 800785a:	d002      	beq.n	8007862 <USBD_StdEPReq+0x16a>
 800785c:	2b03      	cmp	r3, #3
 800785e:	d032      	beq.n	80078c6 <USBD_StdEPReq+0x1ce>
 8007860:	e097      	b.n	8007992 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <USBD_StdEPReq+0x180>
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b80      	cmp	r3, #128	; 0x80
 800786c:	d004      	beq.n	8007878 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fbb9 	bl	8007fe8 <USBD_CtlError>
                break;
 8007876:	e091      	b.n	800799c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da0b      	bge.n	8007898 <USBD_StdEPReq+0x1a0>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	3310      	adds	r3, #16
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	3304      	adds	r3, #4
 8007896:	e00b      	b.n	80078b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	3304      	adds	r3, #4
 80078b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2202      	movs	r2, #2
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fbfd 	bl	80080be <USBD_CtlSendData>
              break;
 80078c4:	e06a      	b.n	800799c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	da11      	bge.n	80078f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	3318      	adds	r3, #24
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d117      	bne.n	8007918 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fb7c 	bl	8007fe8 <USBD_CtlError>
                  break;
 80078f0:	e054      	b.n	800799c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	f003 020f 	and.w	r2, r3, #15
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d104      	bne.n	8007918 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fb69 	bl	8007fe8 <USBD_CtlError>
                  break;
 8007916:	e041      	b.n	800799c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	da0b      	bge.n	8007938 <USBD_StdEPReq+0x240>
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	3310      	adds	r3, #16
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	e00b      	b.n	8007950 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	3304      	adds	r3, #4
 8007950:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <USBD_StdEPReq+0x266>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	d103      	bne.n	8007966 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	e00e      	b.n	8007984 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f806 	bl	800897c <USBD_LL_IsStallEP>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e002      	b.n	8007984 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2202      	movs	r2, #2
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fb97 	bl	80080be <USBD_CtlSendData>
              break;
 8007990:	e004      	b.n	800799c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb27 	bl	8007fe8 <USBD_CtlError>
              break;
 800799a:	bf00      	nop
          }
          break;
 800799c:	e004      	b.n	80079a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fb21 	bl	8007fe8 <USBD_CtlError>
          break;
 80079a6:	bf00      	nop
      }
      break;
 80079a8:	e004      	b.n	80079b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb1b 	bl	8007fe8 <USBD_CtlError>
      break;
 80079b2:	bf00      	nop
  }

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	2b06      	cmp	r3, #6
 80079e2:	f200 8128 	bhi.w	8007c36 <USBD_GetDescriptor+0x276>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBD_GetDescriptor+0x2c>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a09 	.word	0x08007a09
 80079f0:	08007a21 	.word	0x08007a21
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007c37 	.word	0x08007c37
 80079fc:	08007c37 	.word	0x08007c37
 8007a00:	08007bd7 	.word	0x08007bd7
 8007a04:	08007c03 	.word	0x08007c03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
      break;
 8007a1e:	e112      	b.n	8007c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f107 0208 	add.w	r2, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	2202      	movs	r2, #2
 8007a40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a42:	e100      	b.n	8007c46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
      break;
 8007a5e:	e0f2      	b.n	8007c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	f200 80ac 	bhi.w	8007bc4 <USBD_GetDescriptor+0x204>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBD_GetDescriptor+0xb4>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007af5 	.word	0x08007af5
 8007a80:	08007b29 	.word	0x08007b29
 8007a84:	08007b5d 	.word	0x08007b5d
 8007a88:	08007b91 	.word	0x08007b91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e091      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa98 	bl	8007fe8 <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e089      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e077      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa7e 	bl	8007fe8 <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e06f      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e05d      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa64 	bl	8007fe8 <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e055      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e043      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa4a 	bl	8007fe8 <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e03b      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e029      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa30 	bl	8007fe8 <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e021      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb2:	e00f      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa16 	bl	8007fe8 <USBD_CtlError>
            err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc2:	e007      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa0e 	bl	8007fe8 <USBD_CtlError>
          err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bd2:	e038      	b.n	8007c46 <USBD_GetDescriptor+0x286>
 8007bd4:	e037      	b.n	8007c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7c1b      	ldrb	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	f107 0208 	add.w	r2, r7, #8
 8007bea:	4610      	mov	r0, r2
 8007bec:	4798      	blx	r3
 8007bee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf0:	e029      	b.n	8007c46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9f7 	bl	8007fe8 <USBD_CtlError>
        err++;
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8007c00:	e021      	b.n	8007c46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7c1b      	ldrb	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	f107 0208 	add.w	r2, r7, #8
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
 8007c1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	2207      	movs	r2, #7
 8007c22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c24:	e00f      	b.n	8007c46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9dd 	bl	8007fe8 <USBD_CtlError>
        err++;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	3301      	adds	r3, #1
 8007c32:	72fb      	strb	r3, [r7, #11]
      break;
 8007c34:	e007      	b.n	8007c46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9d5 	bl	8007fe8 <USBD_CtlError>
      err++;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	3301      	adds	r3, #1
 8007c42:	72fb      	strb	r3, [r7, #11]
      break;
 8007c44:	bf00      	nop
  }

  if (err != 0U)
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11c      	bne.n	8007c86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c4c:	893b      	ldrh	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d011      	beq.n	8007c76 <USBD_GetDescriptor+0x2b6>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	88db      	ldrh	r3, [r3, #6]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00d      	beq.n	8007c76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	88da      	ldrh	r2, [r3, #6]
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bf28      	it	cs
 8007c64:	4613      	movcs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fa24 	bl	80080be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	88db      	ldrh	r3, [r3, #6]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa7b 	bl	800817a <USBD_CtlSendStatus>
 8007c84:	e000      	b.n	8007c88 <USBD_GetDescriptor+0x2c8>
    return;
 8007c86:	bf00      	nop
    }
  }
}
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop

08007c90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	889b      	ldrh	r3, [r3, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d130      	bne.n	8007d04 <USBD_SetAddress+0x74>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88db      	ldrh	r3, [r3, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d12c      	bne.n	8007d04 <USBD_SetAddress+0x74>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb0:	d828      	bhi.n	8007d04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d104      	bne.n	8007cd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f98c 	bl	8007fe8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	e01d      	b.n	8007d0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fe79 	bl	80089d6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fa48 	bl	800817a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf8:	e009      	b.n	8007d0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d02:	e004      	b.n	8007d0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f96e 	bl	8007fe8 <USBD_CtlError>
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	885b      	ldrh	r3, [r3, #2]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	4b41      	ldr	r3, [pc, #260]	; (8007e30 <USBD_SetConfig+0x118>)
 8007d2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d2c:	4b40      	ldr	r3, [pc, #256]	; (8007e30 <USBD_SetConfig+0x118>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d904      	bls.n	8007d3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f956 	bl	8007fe8 <USBD_CtlError>
 8007d3c:	e075      	b.n	8007e2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d002      	beq.n	8007d4e <USBD_SetConfig+0x36>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d023      	beq.n	8007d94 <USBD_SetConfig+0x7c>
 8007d4c:	e062      	b.n	8007e14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d4e:	4b38      	ldr	r3, [pc, #224]	; (8007e30 <USBD_SetConfig+0x118>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01a      	beq.n	8007d8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d56:	4b36      	ldr	r3, [pc, #216]	; (8007e30 <USBD_SetConfig+0x118>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2203      	movs	r2, #3
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d68:	4b31      	ldr	r3, [pc, #196]	; (8007e30 <USBD_SetConfig+0x118>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff f9e4 	bl	800713c <USBD_SetClassConfig>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d104      	bne.n	8007d84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f933 	bl	8007fe8 <USBD_CtlError>
            return;
 8007d82:	e052      	b.n	8007e2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f9f8 	bl	800817a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d8a:	e04e      	b.n	8007e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9f4 	bl	800817a <USBD_CtlSendStatus>
        break;
 8007d92:	e04a      	b.n	8007e2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d94:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <USBD_SetConfig+0x118>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d112      	bne.n	8007dc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007da4:	4b22      	ldr	r3, [pc, #136]	; (8007e30 <USBD_SetConfig+0x118>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dae:	4b20      	ldr	r3, [pc, #128]	; (8007e30 <USBD_SetConfig+0x118>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff f9e0 	bl	800717a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f9dd 	bl	800817a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dc0:	e033      	b.n	8007e2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007dc2:	4b1b      	ldr	r3, [pc, #108]	; (8007e30 <USBD_SetConfig+0x118>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d01d      	beq.n	8007e0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff f9ce 	bl	800717a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dde:	4b14      	ldr	r3, [pc, #80]	; (8007e30 <USBD_SetConfig+0x118>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007de8:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <USBD_SetConfig+0x118>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff f9a4 	bl	800713c <USBD_SetClassConfig>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d104      	bne.n	8007e04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f8f3 	bl	8007fe8 <USBD_CtlError>
            return;
 8007e02:	e012      	b.n	8007e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f9b8 	bl	800817a <USBD_CtlSendStatus>
        break;
 8007e0a:	e00e      	b.n	8007e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f9b4 	bl	800817a <USBD_CtlSendStatus>
        break;
 8007e12:	e00a      	b.n	8007e2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f8e6 	bl	8007fe8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <USBD_SetConfig+0x118>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff f9a9 	bl	800717a <USBD_ClrClassConfig>
        break;
 8007e28:	bf00      	nop
    }
  }
}
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000260 	.word	0x20000260

08007e34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	88db      	ldrh	r3, [r3, #6]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d004      	beq.n	8007e50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8cd 	bl	8007fe8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e4e:	e022      	b.n	8007e96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	dc02      	bgt.n	8007e60 <USBD_GetConfig+0x2c>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dc03      	bgt.n	8007e66 <USBD_GetConfig+0x32>
 8007e5e:	e015      	b.n	8007e8c <USBD_GetConfig+0x58>
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetConfig+0x48>
 8007e64:	e012      	b.n	8007e8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	2201      	movs	r2, #1
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f922 	bl	80080be <USBD_CtlSendData>
        break;
 8007e7a:	e00c      	b.n	8007e96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	2201      	movs	r2, #1
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f91a 	bl	80080be <USBD_CtlSendData>
        break;
 8007e8a:	e004      	b.n	8007e96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f8aa 	bl	8007fe8 <USBD_CtlError>
        break;
 8007e94:	bf00      	nop
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d81e      	bhi.n	8007ef2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	88db      	ldrh	r3, [r3, #6]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d004      	beq.n	8007ec6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f892 	bl	8007fe8 <USBD_CtlError>
        break;
 8007ec4:	e01a      	b.n	8007efc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 0202 	orr.w	r2, r3, #2
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8e7 	bl	80080be <USBD_CtlSendData>
      break;
 8007ef0:	e004      	b.n	8007efc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f877 	bl	8007fe8 <USBD_CtlError>
      break;
 8007efa:	bf00      	nop
  }
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	885b      	ldrh	r3, [r3, #2]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d106      	bne.n	8007f24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f92b 	bl	800817a <USBD_CtlSendStatus>
  }
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d80b      	bhi.n	8007f5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	885b      	ldrh	r3, [r3, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10c      	bne.n	8007f64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f911 	bl	800817a <USBD_CtlSendStatus>
      }
      break;
 8007f58:	e004      	b.n	8007f64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f843 	bl	8007fe8 <USBD_CtlError>
      break;
 8007f62:	e000      	b.n	8007f66 <USBD_ClrFeature+0x3a>
      break;
 8007f64:	bf00      	nop
  }
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	785a      	ldrb	r2, [r3, #1]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	3303      	adds	r3, #3
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	3305      	adds	r3, #5
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	3306      	adds	r3, #6
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	3307      	adds	r3, #7
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	80da      	strh	r2, [r3, #6]

}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ff2:	2180      	movs	r1, #128	; 0x80
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fc83 	bl	8008900 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fc7f 	bl	8008900 <USBD_LL_StallEP>
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b086      	sub	sp, #24
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d032      	beq.n	8008086 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f834 	bl	800808e <USBD_GetLen>
 8008026:	4603      	mov	r3, r0
 8008028:	3301      	adds	r3, #1
 800802a:	b29b      	uxth	r3, r3
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	75fa      	strb	r2, [r7, #23]
 800803a:	461a      	mov	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4413      	add	r3, r2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7812      	ldrb	r2, [r2, #0]
 8008044:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	75fa      	strb	r2, [r7, #23]
 800804c:	461a      	mov	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	2203      	movs	r2, #3
 8008054:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008056:	e012      	b.n	800807e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	60fa      	str	r2, [r7, #12]
 800805e:	7dfa      	ldrb	r2, [r7, #23]
 8008060:	1c51      	adds	r1, r2, #1
 8008062:	75f9      	strb	r1, [r7, #23]
 8008064:	4611      	mov	r1, r2
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	440a      	add	r2, r1
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	75fa      	strb	r2, [r7, #23]
 8008074:	461a      	mov	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	4413      	add	r3, r2
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e8      	bne.n	8008058 <USBD_GetString+0x4e>
    }
  }
}
 8008086:	bf00      	nop
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800809a:	e005      	b.n	80080a8 <USBD_GetLen+0x1a>
  {
    len++;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	3301      	adds	r3, #1
 80080a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3301      	adds	r3, #1
 80080a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f5      	bne.n	800809c <USBD_GetLen+0xe>
  }

  return len;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	4613      	mov	r3, r2
 80080ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080d4:	88fa      	ldrh	r2, [r7, #6]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080e0:	88fb      	ldrh	r3, [r7, #6]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	2100      	movs	r1, #0
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fc94 	bl	8008a14 <USBD_LL_Transmit>

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	4613      	mov	r3, r2
 8008102:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	2100      	movs	r1, #0
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fc82 	bl	8008a14 <USBD_LL_Transmit>

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	4613      	mov	r3, r2
 8008126:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2203      	movs	r2, #3
 800812c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008140:	88fb      	ldrh	r3, [r7, #6]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	2100      	movs	r1, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fc87 	bl	8008a5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	4613      	mov	r3, r2
 8008162:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fc75 	bl	8008a5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc3f 	bl	8008a14 <USBD_LL_Transmit>

  return USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2205      	movs	r2, #5
 80081ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081b0:	2300      	movs	r3, #0
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fc4f 	bl	8008a5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081cc:	2200      	movs	r2, #0
 80081ce:	4912      	ldr	r1, [pc, #72]	; (8008218 <MX_USB_DEVICE_Init+0x50>)
 80081d0:	4812      	ldr	r0, [pc, #72]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 80081d2:	f7fe ff57 	bl	8007084 <USBD_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081dc:	f7f8 fa58 	bl	8000690 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081e0:	490f      	ldr	r1, [pc, #60]	; (8008220 <MX_USB_DEVICE_Init+0x58>)
 80081e2:	480e      	ldr	r0, [pc, #56]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 80081e4:	f7fe ff79 	bl	80070da <USBD_RegisterClass>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081ee:	f7f8 fa4f 	bl	8000690 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081f2:	490c      	ldr	r1, [pc, #48]	; (8008224 <MX_USB_DEVICE_Init+0x5c>)
 80081f4:	4809      	ldr	r0, [pc, #36]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 80081f6:	f7fe fea7 	bl	8006f48 <USBD_CDC_RegisterInterface>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008200:	f7f8 fa46 	bl	8000690 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008204:	4805      	ldr	r0, [pc, #20]	; (800821c <MX_USB_DEVICE_Init+0x54>)
 8008206:	f7fe ff82 	bl	800710e <USBD_Start>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008210:	f7f8 fa3e 	bl	8000690 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008214:	bf00      	nop
 8008216:	bd80      	pop	{r7, pc}
 8008218:	2000012c 	.word	0x2000012c
 800821c:	20000264 	.word	0x20000264
 8008220:	20000018 	.word	0x20000018
 8008224:	2000011c 	.word	0x2000011c

08008228 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800822c:	2200      	movs	r2, #0
 800822e:	4905      	ldr	r1, [pc, #20]	; (8008244 <CDC_Init_FS+0x1c>)
 8008230:	4805      	ldr	r0, [pc, #20]	; (8008248 <CDC_Init_FS+0x20>)
 8008232:	f7fe fea0 	bl	8006f76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008236:	4905      	ldr	r1, [pc, #20]	; (800824c <CDC_Init_FS+0x24>)
 8008238:	4803      	ldr	r0, [pc, #12]	; (8008248 <CDC_Init_FS+0x20>)
 800823a:	f7fe feb6 	bl	8006faa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800823e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008240:	4618      	mov	r0, r3
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20000910 	.word	0x20000910
 8008248:	20000264 	.word	0x20000264
 800824c:	20000528 	.word	0x20000528

08008250 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008254:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008256:	4618      	mov	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
 800826c:	4613      	mov	r3, r2
 800826e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b23      	cmp	r3, #35	; 0x23
 8008274:	d84a      	bhi.n	800830c <CDC_Control_FS+0xac>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <CDC_Control_FS+0x1c>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	0800830d 	.word	0x0800830d
 8008280:	0800830d 	.word	0x0800830d
 8008284:	0800830d 	.word	0x0800830d
 8008288:	0800830d 	.word	0x0800830d
 800828c:	0800830d 	.word	0x0800830d
 8008290:	0800830d 	.word	0x0800830d
 8008294:	0800830d 	.word	0x0800830d
 8008298:	0800830d 	.word	0x0800830d
 800829c:	0800830d 	.word	0x0800830d
 80082a0:	0800830d 	.word	0x0800830d
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	0800830d 	.word	0x0800830d
 80082ac:	0800830d 	.word	0x0800830d
 80082b0:	0800830d 	.word	0x0800830d
 80082b4:	0800830d 	.word	0x0800830d
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	0800830d 	.word	0x0800830d
 80082c0:	0800830d 	.word	0x0800830d
 80082c4:	0800830d 	.word	0x0800830d
 80082c8:	0800830d 	.word	0x0800830d
 80082cc:	0800830d 	.word	0x0800830d
 80082d0:	0800830d 	.word	0x0800830d
 80082d4:	0800830d 	.word	0x0800830d
 80082d8:	0800830d 	.word	0x0800830d
 80082dc:	0800830d 	.word	0x0800830d
 80082e0:	0800830d 	.word	0x0800830d
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	0800830d 	.word	0x0800830d
 80082f0:	0800830d 	.word	0x0800830d
 80082f4:	0800830d 	.word	0x0800830d
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	0800830d 	.word	0x0800830d
 8008300:	0800830d 	.word	0x0800830d
 8008304:	0800830d 	.word	0x0800830d
 8008308:	0800830d 	.word	0x0800830d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800830c:	bf00      	nop
  }

  return (USBD_OK);
 800830e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4808      	ldr	r0, [pc, #32]	; (800834c <CDC_Receive_FS+0x30>)
 800832a:	f7fe fe3e 	bl	8006faa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800832e:	4807      	ldr	r0, [pc, #28]	; (800834c <CDC_Receive_FS+0x30>)
 8008330:	f7fe fe7e 	bl	8007030 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf, *Len);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7f8 f996 	bl	800066c <CDC_ReceiveCallBack>
  return (USBD_OK);
 8008340:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000264 	.word	0x20000264

08008350 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008360:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <CDC_Transmit_FS+0x48>)
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008372:	2301      	movs	r3, #1
 8008374:	e00b      	b.n	800838e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	461a      	mov	r2, r3
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4806      	ldr	r0, [pc, #24]	; (8008398 <CDC_Transmit_FS+0x48>)
 800837e:	f7fe fdfa 	bl	8006f76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008382:	4805      	ldr	r0, [pc, #20]	; (8008398 <CDC_Transmit_FS+0x48>)
 8008384:	f7fe fe25 	bl	8006fd2 <USBD_CDC_TransmitPacket>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000264 	.word	0x20000264

0800839c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2212      	movs	r2, #18
 80083ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	20000148 	.word	0x20000148

080083c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2204      	movs	r2, #4
 80083d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083d2:	4b03      	ldr	r3, [pc, #12]	; (80083e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	2000015c 	.word	0x2000015c

080083e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4907      	ldr	r1, [pc, #28]	; (8008418 <USBD_FS_ProductStrDescriptor+0x34>)
 80083fa:	4808      	ldr	r0, [pc, #32]	; (800841c <USBD_FS_ProductStrDescriptor+0x38>)
 80083fc:	f7ff fe05 	bl	800800a <USBD_GetString>
 8008400:	e004      	b.n	800840c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4904      	ldr	r1, [pc, #16]	; (8008418 <USBD_FS_ProductStrDescriptor+0x34>)
 8008406:	4805      	ldr	r0, [pc, #20]	; (800841c <USBD_FS_ProductStrDescriptor+0x38>)
 8008408:	f7ff fdff 	bl	800800a <USBD_GetString>
  }
  return USBD_StrDesc;
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000cf8 	.word	0x20000cf8
 800841c:	08008bd8 	.word	0x08008bd8

08008420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	4904      	ldr	r1, [pc, #16]	; (8008440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008430:	4804      	ldr	r0, [pc, #16]	; (8008444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008432:	f7ff fdea 	bl	800800a <USBD_GetString>
  return USBD_StrDesc;
 8008436:	4b02      	ldr	r3, [pc, #8]	; (8008440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000cf8 	.word	0x20000cf8
 8008444:	08008bf0 	.word	0x08008bf0

08008448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	6039      	str	r1, [r7, #0]
 8008452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	221a      	movs	r2, #26
 8008458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800845a:	f000 f843 	bl	80084e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800845e:	4b02      	ldr	r3, [pc, #8]	; (8008468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000160 	.word	0x20000160

0800846c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4907      	ldr	r1, [pc, #28]	; (80084a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008482:	4808      	ldr	r0, [pc, #32]	; (80084a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008484:	f7ff fdc1 	bl	800800a <USBD_GetString>
 8008488:	e004      	b.n	8008494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4904      	ldr	r1, [pc, #16]	; (80084a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800848e:	4805      	ldr	r0, [pc, #20]	; (80084a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008490:	f7ff fdbb 	bl	800800a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008494:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000cf8 	.word	0x20000cf8
 80084a4:	08008c04 	.word	0x08008c04

080084a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	4907      	ldr	r1, [pc, #28]	; (80084dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084be:	4808      	ldr	r0, [pc, #32]	; (80084e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084c0:	f7ff fda3 	bl	800800a <USBD_GetString>
 80084c4:	e004      	b.n	80084d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4904      	ldr	r1, [pc, #16]	; (80084dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ca:	4805      	ldr	r0, [pc, #20]	; (80084e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084cc:	f7ff fd9d 	bl	800800a <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d0:	4b02      	ldr	r3, [pc, #8]	; (80084dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000cf8 	.word	0x20000cf8
 80084e0:	08008c10 	.word	0x08008c10

080084e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <Get_SerialNum+0x44>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084f0:	4b0e      	ldr	r3, [pc, #56]	; (800852c <Get_SerialNum+0x48>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084f6:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <Get_SerialNum+0x4c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800850a:	2208      	movs	r2, #8
 800850c:	4909      	ldr	r1, [pc, #36]	; (8008534 <Get_SerialNum+0x50>)
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f814 	bl	800853c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008514:	2204      	movs	r2, #4
 8008516:	4908      	ldr	r1, [pc, #32]	; (8008538 <Get_SerialNum+0x54>)
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	f000 f80f 	bl	800853c <IntToUnicode>
  }
}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	1ffff7ac 	.word	0x1ffff7ac
 800852c:	1ffff7b0 	.word	0x1ffff7b0
 8008530:	1ffff7b4 	.word	0x1ffff7b4
 8008534:	20000162 	.word	0x20000162
 8008538:	20000172 	.word	0x20000172

0800853c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
 8008552:	e027      	b.n	80085a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	0f1b      	lsrs	r3, r3, #28
 8008558:	2b09      	cmp	r3, #9
 800855a:	d80b      	bhi.n	8008574 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	0f1b      	lsrs	r3, r3, #28
 8008560:	b2da      	uxtb	r2, r3
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	4619      	mov	r1, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	440b      	add	r3, r1
 800856c:	3230      	adds	r2, #48	; 0x30
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e00a      	b.n	800858a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	0f1b      	lsrs	r3, r3, #28
 8008578:	b2da      	uxtb	r2, r3
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4619      	mov	r1, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	440b      	add	r3, r1
 8008584:	3237      	adds	r2, #55	; 0x37
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	3301      	adds	r3, #1
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	3301      	adds	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]
 80085a4:	7dfa      	ldrb	r2, [r7, #23]
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d3d3      	bcc.n	8008554 <IntToUnicode+0x18>
  }
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085c4:	f107 0314 	add.w	r3, r7, #20
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	609a      	str	r2, [r3, #8]
 80085d0:	60da      	str	r2, [r3, #12]
 80085d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1c      	ldr	r2, [pc, #112]	; (800864c <HAL_PCD_MspInit+0x90>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d131      	bne.n	8008642 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085de:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <HAL_PCD_MspInit+0x94>)
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <HAL_PCD_MspInit+0x94>)
 80085e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e8:	6153      	str	r3, [r2, #20]
 80085ea:	4b19      	ldr	r3, [pc, #100]	; (8008650 <HAL_PCD_MspInit+0x94>)
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80085f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085fc:	2302      	movs	r3, #2
 80085fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008600:	2300      	movs	r3, #0
 8008602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008604:	2303      	movs	r3, #3
 8008606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008608:	230e      	movs	r3, #14
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	4619      	mov	r1, r3
 8008612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008616:	f7f8 fad3 	bl	8000bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800861a:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <HAL_PCD_MspInit+0x94>)
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	4a0c      	ldr	r2, [pc, #48]	; (8008650 <HAL_PCD_MspInit+0x94>)
 8008620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008624:	61d3      	str	r3, [r2, #28]
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <HAL_PCD_MspInit+0x94>)
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008632:	2200      	movs	r2, #0
 8008634:	2100      	movs	r1, #0
 8008636:	2014      	movs	r0, #20
 8008638:	f7f8 fa8b 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800863c:	2014      	movs	r0, #20
 800863e:	f7f8 faa4 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008642:	bf00      	nop
 8008644:	3728      	adds	r7, #40	; 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40005c00 	.word	0x40005c00
 8008650:	40021000 	.word	0x40021000

08008654 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f7fe fd98 	bl	80071a0 <USBD_LL_SetupStage>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800868a:	78fa      	ldrb	r2, [r7, #3]
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	440b      	add	r3, r1
 8008698:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	4619      	mov	r1, r3
 80086a2:	f7fe fdca 	bl	800723a <USBD_LL_DataOutStage>
}
 80086a6:	bf00      	nop
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	440b      	add	r3, r1
 80086ce:	333c      	adds	r3, #60	; 0x3c
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	4619      	mov	r1, r3
 80086d6:	f7fe fe21 	bl	800731c <USBD_LL_DataInStage>
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe ff34 	bl	800755e <USBD_LL_SOF>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008706:	2301      	movs	r3, #1
 8008708:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d001      	beq.n	8008716 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008712:	f7f7 ffbd 	bl	8000690 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800871c:	7bfa      	ldrb	r2, [r7, #15]
 800871e:	4611      	mov	r1, r2
 8008720:	4618      	mov	r0, r3
 8008722:	f7fe fee1 	bl	80074e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fe9a 	bl	8007466 <USBD_LL_Reset>
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe fedc 	bl	8007508 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <HAL_PCD_SuspendCallback+0x30>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	4a03      	ldr	r2, [pc, #12]	; (800876c <HAL_PCD_SuspendCallback+0x30>)
 800875e:	f043 0306 	orr.w	r3, r3, #6
 8008762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	e000ed00 	.word	0xe000ed00

08008770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fed7 	bl	8007532 <USBD_LL_Resume>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008794:	4a28      	ldr	r2, [pc, #160]	; (8008838 <USBD_LL_Init+0xac>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a26      	ldr	r2, [pc, #152]	; (8008838 <USBD_LL_Init+0xac>)
 80087a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087a4:	4b24      	ldr	r3, [pc, #144]	; (8008838 <USBD_LL_Init+0xac>)
 80087a6:	4a25      	ldr	r2, [pc, #148]	; (800883c <USBD_LL_Init+0xb0>)
 80087a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087aa:	4b23      	ldr	r3, [pc, #140]	; (8008838 <USBD_LL_Init+0xac>)
 80087ac:	2208      	movs	r2, #8
 80087ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <USBD_LL_Init+0xac>)
 80087b2:	2202      	movs	r2, #2
 80087b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087b6:	4b20      	ldr	r3, [pc, #128]	; (8008838 <USBD_LL_Init+0xac>)
 80087b8:	2202      	movs	r2, #2
 80087ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087bc:	4b1e      	ldr	r3, [pc, #120]	; (8008838 <USBD_LL_Init+0xac>)
 80087be:	2200      	movs	r2, #0
 80087c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087c2:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <USBD_LL_Init+0xac>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087c8:	481b      	ldr	r0, [pc, #108]	; (8008838 <USBD_LL_Init+0xac>)
 80087ca:	f7f8 fcb1 	bl	8001130 <HAL_PCD_Init>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087d4:	f7f7 ff5c 	bl	8000690 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087de:	2318      	movs	r3, #24
 80087e0:	2200      	movs	r2, #0
 80087e2:	2100      	movs	r1, #0
 80087e4:	f7fa f93a 	bl	8002a5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087ee:	2358      	movs	r3, #88	; 0x58
 80087f0:	2200      	movs	r2, #0
 80087f2:	2180      	movs	r1, #128	; 0x80
 80087f4:	f7fa f932 	bl	8002a5c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087fe:	23c0      	movs	r3, #192	; 0xc0
 8008800:	2200      	movs	r2, #0
 8008802:	2181      	movs	r1, #129	; 0x81
 8008804:	f7fa f92a 	bl	8002a5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800880e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008812:	2200      	movs	r2, #0
 8008814:	2101      	movs	r1, #1
 8008816:	f7fa f921 	bl	8002a5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008824:	2200      	movs	r2, #0
 8008826:	2182      	movs	r1, #130	; 0x82
 8008828:	f7fa f918 	bl	8002a5c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000ef8 	.word	0x20000ef8
 800883c:	40005c00 	.word	0x40005c00

08008840 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008856:	4618      	mov	r0, r3
 8008858:	f7f8 fd3c 	bl	80012d4 <HAL_PCD_Start>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 f954 	bl	8008b10 <USBD_Get_USB_Status>
 8008868:	4603      	mov	r3, r0
 800886a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800886c:	7bbb      	ldrb	r3, [r7, #14]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	4608      	mov	r0, r1
 8008880:	4611      	mov	r1, r2
 8008882:	461a      	mov	r2, r3
 8008884:	4603      	mov	r3, r0
 8008886:	70fb      	strb	r3, [r7, #3]
 8008888:	460b      	mov	r3, r1
 800888a:	70bb      	strb	r3, [r7, #2]
 800888c:	4613      	mov	r3, r2
 800888e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800889e:	78bb      	ldrb	r3, [r7, #2]
 80088a0:	883a      	ldrh	r2, [r7, #0]
 80088a2:	78f9      	ldrb	r1, [r7, #3]
 80088a4:	f7f8 fe35 	bl	8001512 <HAL_PCD_EP_Open>
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f92e 	bl	8008b10 <USBD_Get_USB_Status>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088dc:	78fa      	ldrb	r2, [r7, #3]
 80088de:	4611      	mov	r1, r2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7f8 fe73 	bl	80015cc <HAL_PCD_EP_Close>
 80088e6:	4603      	mov	r3, r0
 80088e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 f90f 	bl	8008b10 <USBD_Get_USB_Status>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f7f8 ff1c 	bl	800175c <HAL_PCD_EP_SetStall>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	4618      	mov	r0, r3
 800892c:	f000 f8f0 	bl	8008b10 <USBD_Get_USB_Status>
 8008930:	4603      	mov	r3, r0
 8008932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008934:	7bbb      	ldrb	r3, [r7, #14]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f7f8 ff4f 	bl	8001800 <HAL_PCD_EP_ClrStall>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	4618      	mov	r0, r3
 800896a:	f000 f8d1 	bl	8008b10 <USBD_Get_USB_Status>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008972:	7bbb      	ldrb	r3, [r7, #14]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800898e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da0c      	bge.n	80089b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	440b      	add	r3, r1
 80089ac:	3302      	adds	r3, #2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	e00b      	b.n	80089ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089b8:	68f9      	ldr	r1, [r7, #12]
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	440b      	add	r3, r1
 80089c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3714      	adds	r7, #20
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	4611      	mov	r1, r2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7f8 fd67 	bl	80014c8 <HAL_PCD_SetAddress>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f885 	bl	8008b10 <USBD_Get_USB_Status>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	460b      	mov	r3, r1
 8008a22:	72fb      	strb	r3, [r7, #11]
 8008a24:	4613      	mov	r3, r2
 8008a26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a36:	893b      	ldrh	r3, [r7, #8]
 8008a38:	7af9      	ldrb	r1, [r7, #11]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	f7f8 fe57 	bl	80016ee <HAL_PCD_EP_Transmit>
 8008a40:	4603      	mov	r3, r0
 8008a42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f862 	bl	8008b10 <USBD_Get_USB_Status>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a50:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b086      	sub	sp, #24
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	461a      	mov	r2, r3
 8008a66:	460b      	mov	r3, r1
 8008a68:	72fb      	strb	r3, [r7, #11]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a7c:	893b      	ldrh	r3, [r7, #8]
 8008a7e:	7af9      	ldrb	r1, [r7, #11]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	f7f8 fdeb 	bl	800165c <HAL_PCD_EP_Receive>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 f83f 	bl	8008b10 <USBD_Get_USB_Status>
 8008a92:	4603      	mov	r3, r0
 8008a94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a96:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7f8 fe01 	bl	80016be <HAL_PCD_EP_GetRxCount>
 8008abc:	4603      	mov	r3, r0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ad0:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <USBD_static_malloc+0x18>)
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	200011e4 	.word	0x200011e4

08008ae4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]

}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d817      	bhi.n	8008b54 <USBD_Get_USB_Status+0x44>
 8008b24:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <USBD_Get_USB_Status+0x1c>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b3d 	.word	0x08008b3d
 8008b30:	08008b43 	.word	0x08008b43
 8008b34:	08008b49 	.word	0x08008b49
 8008b38:	08008b4f 	.word	0x08008b4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b40:	e00b      	b.n	8008b5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b42:	2302      	movs	r3, #2
 8008b44:	73fb      	strb	r3, [r7, #15]
    break;
 8008b46:	e008      	b.n	8008b5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e005      	b.n	8008b5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e002      	b.n	8008b5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b54:	2302      	movs	r3, #2
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	bf00      	nop
  }
  return usb_status;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <__libc_init_array>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	4d0d      	ldr	r5, [pc, #52]	; (8008ba0 <__libc_init_array+0x38>)
 8008b6c:	4c0d      	ldr	r4, [pc, #52]	; (8008ba4 <__libc_init_array+0x3c>)
 8008b6e:	1b64      	subs	r4, r4, r5
 8008b70:	10a4      	asrs	r4, r4, #2
 8008b72:	2600      	movs	r6, #0
 8008b74:	42a6      	cmp	r6, r4
 8008b76:	d109      	bne.n	8008b8c <__libc_init_array+0x24>
 8008b78:	4d0b      	ldr	r5, [pc, #44]	; (8008ba8 <__libc_init_array+0x40>)
 8008b7a:	4c0c      	ldr	r4, [pc, #48]	; (8008bac <__libc_init_array+0x44>)
 8008b7c:	f000 f820 	bl	8008bc0 <_init>
 8008b80:	1b64      	subs	r4, r4, r5
 8008b82:	10a4      	asrs	r4, r4, #2
 8008b84:	2600      	movs	r6, #0
 8008b86:	42a6      	cmp	r6, r4
 8008b88:	d105      	bne.n	8008b96 <__libc_init_array+0x2e>
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b90:	4798      	blx	r3
 8008b92:	3601      	adds	r6, #1
 8008b94:	e7ee      	b.n	8008b74 <__libc_init_array+0xc>
 8008b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9a:	4798      	blx	r3
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	e7f2      	b.n	8008b86 <__libc_init_array+0x1e>
 8008ba0:	08008c50 	.word	0x08008c50
 8008ba4:	08008c50 	.word	0x08008c50
 8008ba8:	08008c50 	.word	0x08008c50
 8008bac:	08008c54 	.word	0x08008c54

08008bb0 <memset>:
 8008bb0:	4402      	add	r2, r0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d100      	bne.n	8008bba <memset+0xa>
 8008bb8:	4770      	bx	lr
 8008bba:	f803 1b01 	strb.w	r1, [r3], #1
 8008bbe:	e7f9      	b.n	8008bb4 <memset+0x4>

08008bc0 <_init>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr

08008bcc <_fini>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr
